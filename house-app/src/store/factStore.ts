import { create } from 'zustand'
import { persist } from 'zustand/middleware'
import type { ConstructionOption, Risk } from '../constants'
import { RISKS } from '../constants'
import { usePlanStore } from './store'

export interface Period {
  id: number
  startDay: number
  endDay: number
  risk: Risk | null
  selectedSolution: 'solution' | 'alternative' | null
  isProtected: boolean
}

export interface PaymentScheduleItem {
  dayIndex: number
  amount: number
  issued: number | null
  construction: string | null
  procent: number
  overallPrice: number
  overallDuration: number
}

export interface FundingPlanItem {
  dayIndex: number
  amount: number
}


export interface FactState {
  selectedOptions: Record<string, ConstructionOption | null>
  budget: number
  duration: number
  periods: Period[]
  currentPeriodIndex: number
  paymentSchedule: PaymentScheduleItem[]
  fundingPlan: FundingPlanItem[]
  history: PaymentScheduleItem[]
  piggyBank: number
  planningRemainder: number
  constructionDurationModifications: Record<string, number>
  
  initializeFromPlan: () => void
  selectOption: (constructionType: string, option: ConstructionOption) => void
  clearSelection: (constructionType: string) => void
  getRemainingBudget: () => number
  getRemainingDuration: () => number
  getTotalCost: () => number
  getTotalDuration: () => number
  getRiskCosts: () => number
  getRiskDuration: () => number
  setCurrentPeriod: (index: number) => void
  selectRiskSolution: (periodId: number, solution: 'solution' | 'alternative') => void
  generatePeriods: () => void
  assignRandomRisk: (periodId: number) => void
  generatePaymentSchedule: () => void
  generateFundingPlan: () => void
  processDay: (day: number) => void
  requestMoney: (amount: number) => void
  moveToNextPeriod: () => void
  resetFact: () => void
  recalculatePaymentSchedule: () => void
  recalculateFundingPlan: () => void
  recalculatePaymentScheduleForAlternative: (affectedElement: string, additionalDuration: number) => void
  recalculateFundingPlanForAlternative: (affectedElement: string, additionalDuration: number) => void
  preserveIssuedHistory: (newPaymentSchedule: PaymentScheduleItem[]) => PaymentScheduleItem[]
  restoreFromHistory: () => void
  addToHistory: (day: PaymentScheduleItem) => void
  getModifiedDuration: (constructionType: string) => number
  addDurationModification: (constructionType: string, additionalDuration: number) => void
  addIdleDays: (constructionType: string, idleDays: number) => void
}

export const useFactStore = create<FactState>()(
  persist(
    (set, get) => ({
      selectedOptions: {},
      budget: 50000,
      duration: 90,
      periods: [],
      currentPeriodIndex: 0,
      paymentSchedule: [],
      fundingPlan: [],
      history: [],
      piggyBank: 0,
      planningRemainder: 0,
      constructionDurationModifications: {},
      
      initializeFromPlan: () => {
        const planStore = usePlanStore.getState()
        const totalCost = Object.values(planStore.selectedOptions)
          .filter((option): option is ConstructionOption => option !== null)
          .reduce((total, option) => total + option.cost, 0)
        const planningRemainder = planStore.budget - totalCost
        
        set({
          selectedOptions: { ...planStore.selectedOptions },
          budget: planStore.budget,
          duration: planStore.duration,
          piggyBank: 0,
          planningRemainder: planningRemainder
        })
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω—ã –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è selectedOptions
        setTimeout(() => {
          get().generatePeriods()
          get().generateFundingPlan()
          get().generatePaymentSchedule()
          
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º —Ä–∏—Å–∫ –Ω–∞ –ø–µ—Ä–≤—ã–π –ø–µ—Ä–∏–æ–¥
          const { periods, assignRandomRisk } = get()
          if (periods.length > 0) {
            assignRandomRisk(periods[0].id)
            console.log(`üé≤ –†–∏—Å–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –ø–µ—Ä–∏–æ–¥ 1 (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)`)
          }
        }, 0)
      },
      
      selectOption: (constructionType: string, option: ConstructionOption) => {
        set((state) => ({
          selectedOptions: {
            ...state.selectedOptions,
            [constructionType]: option
          }
        }))
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω—ã –∏ –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–ø—Ü–∏–π
        setTimeout(() => {
          const { selectedOptions, budget } = get()
          const totalCost = Object.values(selectedOptions)
            .filter((opt): opt is ConstructionOption => opt !== null)
            .reduce((total, opt) => total + opt.cost, 0)
          const planningRemainder = budget - totalCost
          
          set({ planningRemainder })
          get().generateFundingPlan()
          get().generatePaymentSchedule()
        }, 0)
      },
      
      clearSelection: (constructionType: string) => {
        set((state) => {
          const newSelectedOptions = { ...state.selectedOptions }
          delete newSelectedOptions[constructionType]
          return { selectedOptions: newSelectedOptions }
        })
      },
      
      getTotalCost: () => {
        const { selectedOptions } = get()
        return Object.values(selectedOptions)
          .filter((option): option is ConstructionOption => option !== null)
          .reduce((total, option) => total + option.cost, 0)
      },
      
      getTotalDuration: () => {
        const { selectedOptions } = get()
        return Object.values(selectedOptions)
          .filter((option): option is ConstructionOption => option !== null)
          .reduce((total, option) => total + option.duration, 0)
      },
      
      getRiskCosts: () => {
        const { periods } = get()
        return periods
          .filter(period => period.risk && period.selectedSolution === 'solution')
          .reduce((total, period) => total + (period.risk?.cost || 0), 0)
      },
      
      getRiskDuration: () => {
        const { periods } = get()
        return periods
          .filter(period => period.risk && period.selectedSolution === 'solution')
          .reduce((total, period) => total + (period.risk?.duration || 0), 0)
      },
      
      getRemainingBudget: () => {
        const { budget, getTotalCost } = get()
        return budget - getTotalCost()
      },
      
      getRemainingDuration: () => {
        const { duration, getTotalDuration } = get()
        return duration - getTotalDuration()
      },
      
      setCurrentPeriod: (index: number) => {
        set({ currentPeriodIndex: index })
      },
      
      selectRiskSolution: (periodId: number, solution: 'solution' | 'alternative') => {
        const { periods } = get()
        const period = periods.find(p => p.id === periodId)
        
        console.log(`üéØ –†–µ—à–µ–Ω–∏–µ –ø–æ —Ä–∏—Å–∫—É: ${solution === 'solution' ? '–†–µ—à–µ–Ω–∏–µ' : '–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞'} | –ü–µ—Ä–∏–æ–¥ ${periodId}`)
        
        set((state) => ({
          periods: state.periods.map((period: Period) =>
            period.id === periodId
              ? { ...period, selectedSolution: solution }
              : period
          )
        }))
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –≤—ã–±–æ—Ä–∞ —Ä–µ—à–µ–Ω–∏—è
        if (period && period.risk) {
          if (solution === 'solution') {
            // –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ - –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ —Å —É—á–µ—Ç–æ–º —à—Ç—Ä–∞—Ñ–æ–≤
            // –®—Ç—Ä–∞—Ñ—ã –±—É–¥—É—Ç —Ä–∞–∑–º–∞–∑–∞–Ω—ã –ø–æ –¥–Ω—è–º —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Å—á–µ—Ç –≥—Ä–∞—Ñ–∏–∫–æ–≤
            get().recalculatePaymentSchedule()
            get().recalculateFundingPlan()
          } else {
            const additionalDuration = Math.ceil(period.risk.duration)
            if (additionalDuration > 0) {
              get().recalculatePaymentScheduleForAlternative(period.risk.affectedElement, additionalDuration)
              get().recalculateFundingPlanForAlternative(period.risk.affectedElement, additionalDuration)
            }
          }
        }
      },
      
      generatePeriods: () => {
        const { getTotalDuration, getModifiedDuration, selectedOptions } = get()
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π
        let totalDuration = 0
        Object.entries(selectedOptions).forEach(([constructionType, option]) => {
          if (option) {
            const modifiedDuration = getModifiedDuration(constructionType)
            totalDuration += modifiedDuration
          }
        })
        
        const periodCount = 5 // –í—Å–µ–≥–¥–∞ 5 –ø–µ—Ä–∏–æ–¥–æ–≤
        const basePeriodDuration = Math.floor(totalDuration / periodCount)
        const remainder = totalDuration % periodCount
        
        const periods: Period[] = []
        let currentDay = 1
        
        for (let i = 0; i < periodCount; i++) {
          // –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥ –º–æ–∂–µ—Ç –±—ã—Ç—å —á—É—Ç—å –±–æ–ª—å—à–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Å—Ç–∞—Ç–æ–∫
          const periodDuration = i === periodCount - 1 
            ? basePeriodDuration + remainder 
            : basePeriodDuration
          
          const endDay = currentDay + periodDuration - 1
          
          periods.push({
            id: i + 1,
            startDay: currentDay,
            endDay: endDay,
            risk: null,
            selectedSolution: null,
            isProtected: false
          })
          
          currentDay = endDay + 1
        }
        
        set({ periods })
      },
      
      assignRandomRisk: (periodId: number) => {
        const { selectedOptions, periods } = get()
        const period = periods.find(p => p.id === periodId)
        
        if (!period) return
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å—Ç—Ä–æ–∏—Ç—Å—è –≤ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥
        const currentDay = period.startDay
        let currentConstructionDay = 1
        let currentConstructionType = null
        let currentConstructionStyle = null
        
        for (const [type, option] of Object.entries(selectedOptions)) {
          if (option && currentDay >= currentConstructionDay && currentDay < currentConstructionDay + option.duration) {
            currentConstructionType = type
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∏–ª—å –∏–∑ —Ç–∏–ø–∞ –æ–ø—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "2 –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å" -> "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å")
            currentConstructionStyle = option.type.split(' ').slice(1).join(' ')
            break
          }
          if (option) {
            currentConstructionDay += option.duration
          }
        }
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–∏—Å–∫–∏ –ø–æ —É—Å–ª–æ–≤–∏—è–º –≤—ã–ø–∞–¥–µ–Ω–∏—è
        const availableRisks = RISKS.filter(risk => {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
          if (risk.affectedElement !== currentConstructionType) {
            return false
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∏–ª—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
          if (!currentConstructionStyle) return false
          const riskStyles = risk.affectedStyle.split(', ').map(s => s.trim())
          return riskStyles.includes(currentConstructionStyle)
        })
        
        if (availableRisks.length === 0) {
          console.log(`‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤ –¥–ª—è ${currentConstructionType} (${currentConstructionStyle})`)
          return
        }
        
        const randomRisk = availableRisks[Math.floor(Math.random() * availableRisks.length)]
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—â–∏—â–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç —ç—Ç–æ–≥–æ —Ä–∏—Å–∫–∞
        const isProtected = randomRisk.affectedElement !== currentConstructionType || 
                           !currentConstructionStyle || 
                           !randomRisk.affectedStyle.split(', ').map(s => s.trim()).includes(currentConstructionStyle)
        
        console.log(`üé≤ –í—ã–±—Ä–∞–Ω —Ä–∏—Å–∫ ${randomRisk.id} –¥–ª—è ${currentConstructionType} (${currentConstructionStyle}) | –ó–∞—â–∏—Ç–∞: ${isProtected ? '–î–ê' : '–ù–ï–¢'}`)
        
        set((state) => ({
          periods: state.periods.map((period: Period) =>
            period.id === periodId
              ? { ...period, risk: randomRisk, isProtected }
              : period
          )
        }))
      },

      generatePaymentSchedule: () => {
        const { selectedOptions, periods, getModifiedDuration } = get()
        const paymentSchedule: PaymentScheduleItem[] = []
        
        // –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –≤—ã–ø–ª–∞—Ç - —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ –≤—Å–µ–º –¥–Ω—è–º —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
        let currentDay = 1
        Object.entries(selectedOptions).forEach(([constructionType, option]) => {
          if (option) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            const modifiedDuration = getModifiedDuration(constructionType)
            
            // –ù–∞—Ö–æ–¥–∏–º —Ä–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–ª–∏—è—é—Ç –Ω–∞ —ç—Ç—É –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
            const constructionRisks = periods.filter(period => 
              period.risk && 
              period.selectedSolution === 'solution' && 
              period.risk.affectedElement === constructionType
            )
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º —Ä–∏—Å–∫–æ–≤
            const totalRiskDuration = constructionRisks.reduce((sum, period) => 
              sum + (period.risk?.duration || 0), 0
            )
            const overallDuration = modifiedDuration + totalRiskDuration
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º —Ä–∏—Å–∫–æ–≤
            const totalRiskCost = constructionRisks.reduce((sum, period) => 
              sum + (period.risk?.cost || 0), 0
            )
            const overallPrice = option.cost + totalRiskCost
            
            const dailyAmount = overallPrice / overallDuration
            
            for (let i = 0; i < overallDuration; i++) {
              paymentSchedule.push({
                dayIndex: currentDay + i,
                amount: Math.ceil(dailyAmount),
                issued: null,
                construction: constructionType,
                procent: 0, // issued = null, –∑–Ω–∞—á–∏—Ç –ø—Ä–æ—Ü–µ–Ω—Ç —Ç–æ–ª—å–∫–æ 0
                overallPrice: overallPrice,
                overallDuration: overallDuration
              })
            }
            currentDay += overallDuration
          }
        })
        
        console.log(`üìä –ì—Ä–∞—Ñ–∏–∫ –≤—ã–ø–ª–∞—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ${paymentSchedule.length} –¥–Ω–µ–π | –û–±—â–∞—è —Å—É–º–º–∞: ${paymentSchedule.reduce((sum, p) => sum + p.amount, 0)} —Ä—É–±.`)
        set({ paymentSchedule })
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        get().restoreFromHistory()
      },

      generateFundingPlan: () => {
        const { selectedOptions, getModifiedDuration } = get()
        const fundingPlan: FundingPlanItem[] = []
        
        // –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è - –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –≤ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        let currentDay = 1
        Object.entries(selectedOptions).forEach(([constructionType, option]) => {
          if (option) {
            const modifiedDuration = getModifiedDuration(constructionType)
            fundingPlan.push({
              dayIndex: currentDay,
              amount: option.cost
            })
            currentDay += modifiedDuration
          }
        })
        
        console.log(`üí∞ –ü–ª–∞–Ω —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ${fundingPlan.length} —Ç—Ä–∞–Ω—à–µ–π | –û–±—â–∞—è —Å—É–º–º–∞: ${fundingPlan.reduce((sum, f) => sum + f.amount, 0)} —Ä—É–±.`)
        set({ fundingPlan })
      },

      processDay: (day: number) => {
        const { fundingPlan, piggyBank, paymentSchedule } = get()
        
        console.log(`üìÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–Ω—è ${day}`)
        console.log(`üè¶ –ö–£–ë–´–®–ö–ê –î–û –û–ü–ï–†–ê–¶–ò–ô: ${piggyBank} —Ä—É–±.`)
        
        // –ó–∞—á–∏—Å–ª—è–µ–º –¥–µ–Ω—å–≥–∏ –ø–æ –ø–ª–∞–Ω—É —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
        const dayFunding = fundingPlan.filter(funding => funding.dayIndex === day)
        const totalIncoming = dayFunding.reduce((sum, funding) => sum + funding.amount, 0)
        
        if (totalIncoming > 0) {
          console.log(`üí∞ –ü–û–°–¢–£–ü–õ–ï–ù–ò–ï –í –ö–£–ë–´–®–ö–£: +${totalIncoming} —Ä—É–±. (–¥–µ–Ω—å ${day})`)
          console.log(`üè¶ –ö–£–ë–´–®–ö–ê –ü–û–°–õ–ï –ü–û–°–¢–£–ü–õ–ï–ù–ò–Ø: ${piggyBank + totalIncoming} —Ä—É–±.`)
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É–±—ã—à–∫—É
        set({ piggyBank: piggyBank + totalIncoming })
        console.log(`üè¶ –ö–£–ë–´–®–ö–ê –û–ë–ù–û–í–õ–ï–ù–ê: ${piggyBank + totalIncoming} —Ä—É–±.`)
        
        // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å–∏ –≤ paymentSchedule –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
        const dayPayments = paymentSchedule.filter(payment => payment.dayIndex === day)
        
        if (dayPayments.length === 0) {
          console.log(`‚ö†Ô∏è –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –≥—Ä–∞—Ñ–∏–∫–µ –≤—ã–ø–ª–∞—Ç –¥–ª—è –¥–Ω—è ${day}`)
          return
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
        const currentPiggyBank = get().piggyBank
        
        set((state) => {
          const newPaymentSchedule = state.paymentSchedule.map(payment => {
            if (payment.dayIndex === day && payment.issued === null) {
              const requiredMoney = payment.amount
              const isIdle = currentPiggyBank < requiredMoney
              const issuedMoney = isIdle ? 0 : requiredMoney
              
              console.log(`üí≥ –¢–†–ï–ë–£–ï–¢–°–Ø: ${requiredMoney} —Ä—É–±. | –í–´–î–ê–ù–û: ${issuedMoney} —Ä—É–±. | –ü–†–û–°–¢–û–ô: ${isIdle ? '–î–ê' : '–ù–ï–¢'}`)
              
              if (issuedMoney > 0) {
                console.log(`üí∏ –°–ü–ò–°–ê–ù–ò–ï –° –ö–£–ë–´–®–ö–ò: -${issuedMoney} —Ä—É–±. (–¥–µ–Ω—å ${day})`)
              }
              
              // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–¥–∞—á–∞ –¥–µ–Ω–µ–≥
              let newProcent = 0
              if (issuedMoney > 0) {
                // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –¥–ª—è —ç—Ç–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
                const constructionPayments = state.paymentSchedule
                  .filter(p => p.construction === payment.construction && p.dayIndex <= day)
                  .sort((a, b) => a.dayIndex - b.dayIndex)
                
                const currentDayInConstruction = constructionPayments.length
                newProcent = Math.round((currentDayInConstruction / payment.overallDuration) * 100)
                console.log(`üìà –ü–†–û–ì–†–ï–°–°: –¥–µ–Ω—å ${currentDayInConstruction}/${payment.overallDuration} = ${newProcent}% (–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ${payment.construction})`)
              } else if (issuedMoney === 0) {
                // –ü—Ä–æ—Å—Ç–æ–π - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç
                const constructionPayments = state.paymentSchedule
                  .filter(p => p.construction === payment.construction && p.dayIndex < day)
                  .sort((a, b) => b.dayIndex - a.dayIndex)
                
                if (constructionPayments.length > 0) {
                  const lastPayment = constructionPayments[0]
                  if (lastPayment.issued !== null) {
                    newProcent = lastPayment.procent
                    console.log(`‚è∏Ô∏è –ü–†–û–°–¢–û–ô: –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω ${newProcent}% (–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ${payment.construction})`)
                  }
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å –ø—Ä–æ—Å—Ç–æ—è –¥–ª—è –Ω–µ–¥–æ—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
                get().addIdleDays(payment.construction, 1)
              }
              
              const updatedPayment = {
                ...payment,
                issued: issuedMoney,
                procent: newProcent
              }
              
              // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
              get().addToHistory(updatedPayment)
              
              return updatedPayment
            }
            return payment
          })
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É–±—ã—à–∫—É –ø–æ—Å–ª–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
          const totalIssued = dayPayments.reduce((sum, payment) => {
            if (payment.issued === null) {
              const requiredMoney = payment.amount
              const isIdle = currentPiggyBank < requiredMoney
              const issuedMoney = isIdle ? 0 : requiredMoney
              return sum + issuedMoney
            }
            return sum + payment.issued
          }, 0)
          
          console.log(`üè¶ –ö–£–ë–´–®–ö–ê –ü–û–°–õ–ï –°–ü–ò–°–ê–ù–ò–Ø: ${currentPiggyBank - totalIssued} —Ä—É–±.`)
          
          return {
            paymentSchedule: newPaymentSchedule,
            piggyBank: currentPiggyBank - totalIssued
          }
        })
      },

      requestMoney: (amount: number) => {
        const { planningRemainder, piggyBank } = get()
        if (amount <= planningRemainder) {
          console.log(`üè¶ –ö–£–ë–´–®–ö–ê –î–û –ó–ê–ü–†–û–°–ê: ${piggyBank} —Ä—É–±.`)
          console.log(`üí∞ –ó–ê–ü–†–û–° –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –°–†–ï–î–°–¢–í: +${amount} —Ä—É–±.`)
          console.log(`üè¶ –ö–£–ë–´–®–ö–ê –ü–û–°–õ–ï –ó–ê–ü–†–û–°–ê: ${piggyBank + amount} —Ä—É–±.`)
          
          set((state) => ({
            piggyBank: state.piggyBank + amount,
            planningRemainder: state.planningRemainder - amount
          }))
        } else {
          console.log(`‚ùå –ó–ê–ü–†–û–° –û–¢–ö–õ–û–ù–ï–ù: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–º –æ—Å—Ç–∞—Ç–∫–µ (${planningRemainder} —Ä—É–±.)`)
        }
      },

      moveToNextPeriod: () => {
        const { currentPeriodIndex, periods, assignRandomRisk } = get()
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–µ—Ä–∏–æ–¥—É
        const nextPeriodIndex = currentPeriodIndex + 1
        
        console.log(`üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–µ—Ä–∏–æ–¥—É ${nextPeriodIndex + 1}`)
        
        set({
          currentPeriodIndex: nextPeriodIndex
        })
        
        // –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–∏—Å–∫ –Ω–∞ –Ω–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥
        if (nextPeriodIndex < periods.length) {
          const nextPeriod = periods[nextPeriodIndex]
          if (nextPeriod) {
            assignRandomRisk(nextPeriod.id)
            console.log(`üé≤ –†–∏—Å–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –ø–µ—Ä–∏–æ–¥ ${nextPeriodIndex + 1}`)
          }
        }
      },
      
      resetFact: () => {
        set({
          selectedOptions: {},
          budget: 50000,
          duration: 90,
          periods: [],
          currentPeriodIndex: 0,
          paymentSchedule: [],
          fundingPlan: [],
          history: [],
          piggyBank: 0,
          planningRemainder: 0,
          constructionDurationModifications: {}
        })
      },


      recalculatePaymentSchedule: () => {
        const { selectedOptions, periods, currentPeriodIndex, paymentSchedule, history } = get()
        
        // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥
        const currentPeriod = periods[currentPeriodIndex]
        if (!currentPeriod) {
          console.log('‚ùå –¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω')
          return
        }
        
        const startDay = currentPeriod.startDay
        console.log(`üìä –ü–µ—Ä–µ—Å—á–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∞ –≤—ã–ø–ª–∞—Ç —Å –¥–Ω—è ${startDay} (–ø–µ—Ä–∏–æ–¥ ${currentPeriodIndex + 1})`)
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–æ –¥–Ω—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞
        const preservedPayments = paymentSchedule.filter(payment => payment.dayIndex < startDay)
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ –Ω–∞—á–∏–Ω–∞—è —Å –¥–Ω—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞
        const newPayments: PaymentScheduleItem[] = []
        let currentDay = startDay
        
        Object.entries(selectedOptions).forEach(([constructionType, option]) => {
          if (option) {
            // –ù–∞—Ö–æ–¥–∏–º —Ä–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–ª–∏—è—é—Ç –Ω–∞ —ç—Ç—É –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
            const constructionRisks = periods.filter(period => 
              period.risk && 
              period.selectedSolution === 'solution' && 
              period.risk.affectedElement === constructionType
            )
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º —Ä–∏—Å–∫–æ–≤
            const totalRiskDuration = constructionRisks.reduce((sum, period) => 
              sum + (period.risk?.duration || 0), 0
            )
            const overallDuration = option.duration + totalRiskDuration
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º —Ä–∏—Å–∫–æ–≤
            const totalRiskCost = constructionRisks.reduce((sum, period) => 
              sum + (period.risk?.cost || 0), 0
            )
            const overallPrice = option.cost + totalRiskCost
            
            // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ –¥–Ω—è–º
            const dailyAmount = overallPrice / overallDuration
            for (let i = 0; i < overallDuration; i++) {
              newPayments.push({
                dayIndex: currentDay + i,
                amount: Math.ceil(dailyAmount),
                issued: null,
                construction: constructionType,
                procent: 0,
                overallPrice: overallPrice,
                overallDuration: overallDuration
              })
            }
            currentDay += overallDuration
          }
        })
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏ –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
        let updatedPaymentSchedule = [...preservedPayments, ...newPayments]
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        const historyMap = new Map<number, PaymentScheduleItem>()
        history.forEach(day => {
          historyMap.set(day.dayIndex, day)
        })
        
        // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ paymentSchedule –Ω–∞ –∑–∞–ø–∏—Å–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        updatedPaymentSchedule = updatedPaymentSchedule.map(payment => {
          const historyDay = historyMap.get(payment.dayIndex)
          return historyDay || payment
        })
        
        console.log(`üìä –ì—Ä–∞—Ñ–∏–∫ –≤—ã–ø–ª–∞—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${preservedPayments.length} –∑–∞–ø–∏—Å–µ–π, –¥–æ–±–∞–≤–ª–µ–Ω–æ ${newPayments.length} –Ω–æ–≤—ã—Ö`)
        console.log(`üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏: ${historyMap.size} –∑–∞–ø–∏—Å–µ–π`)
        set({ paymentSchedule: updatedPaymentSchedule })
      },

      recalculateFundingPlan: () => {
        const { selectedOptions, periods } = get()
        const fundingPlan: FundingPlanItem[] = []
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è –ë–ï–ó —É—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤
        let currentDay = 1
        Object.values(selectedOptions).forEach((option) => {
          if (option) {
            // –ù–∞—Ö–æ–¥–∏–º —Ä–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–ª–∏—è—é—Ç –Ω–∞ —ç—Ç—É –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
            const constructionRisks = periods.filter(period => 
              period.risk && 
              period.selectedSolution === 'solution' && 
              period.risk.affectedElement === option.constructionType
            )
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º —Ä–∏—Å–∫–æ–≤
            const totalRiskDuration = constructionRisks.reduce((sum, period) => 
              sum + (period.risk?.duration || 0), 0
            )
            const totalDuration = option.duration + totalRiskDuration
            
            // –ü–ª–∞–Ω —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –¢–û–õ–¨–ö–û –±–∞–∑–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            // –®—Ç—Ä–∞—Ñ—ã –æ—Ç —Ä–∏—Å–∫–æ–≤ –ù–ï –≤–∫–ª—é—á–∞—é—Ç—Å—è –≤ –ø–ª–∞–Ω —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
            fundingPlan.push({
              dayIndex: currentDay,
              amount: option.cost
            })
            
            currentDay += totalDuration
          }
        })
        
        console.log(`üí∞ –ü–ª–∞–Ω —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω –ë–ï–ó —É—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤: ${fundingPlan.length} —Ç—Ä–∞–Ω—à–µ–π | –û–±—â–∞—è —Å—É–º–º–∞: ${fundingPlan.reduce((sum, f) => sum + f.amount, 0)} —Ä—É–±.`)
        set({ fundingPlan })
      },

      recalculatePaymentScheduleForAlternative: (affectedElement: string, additionalDuration: number) => {
        const { selectedOptions, addDurationModification, getModifiedDuration } = get()
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        addDurationModification(affectedElement, additionalDuration)
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ –≤—ã–ø–ª–∞—Ç
        const newPaymentSchedule: PaymentScheduleItem[] = []
        let newCurrentDay = 1
        
        for (const [type, option] of Object.entries(selectedOptions)) {
          if (option) {
            const constructionDuration = getModifiedDuration(type)
            const constructionCost = option.cost
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è —ç—Ç–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            const dailyAmount = constructionCost / constructionDuration
            for (let i = 0; i < constructionDuration; i++) {
              newPaymentSchedule.push({
                dayIndex: newCurrentDay + i,
                amount: Math.ceil(dailyAmount),
                issued: null,
                construction: type,
                procent: 0, // issued = null, –∑–Ω–∞—á–∏—Ç –ø—Ä–æ—Ü–µ–Ω—Ç —Ç–æ–ª—å–∫–æ 0
                overallPrice: constructionCost,
                overallDuration: constructionDuration
              })
            }
            
            newCurrentDay += constructionDuration
          }
        }
        
        console.log(`üìä –ì—Ä–∞—Ñ–∏–∫ –≤—ã–ø–ª–∞—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω –¥–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã: +${additionalDuration} –¥–Ω–µ–π –¥–ª—è ${affectedElement}`)
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é issued –∑–Ω–∞—á–µ–Ω–∏–π
        const updatedPaymentSchedule = get().preserveIssuedHistory(newPaymentSchedule)
        set({ paymentSchedule: updatedPaymentSchedule })
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        get().restoreFromHistory()
      },

      recalculateFundingPlanForAlternative: (affectedElement: string, additionalDuration: number) => {
        const { selectedOptions, addDurationModification, getModifiedDuration } = get()
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        addDurationModification(affectedElement, additionalDuration)
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è –ë–ï–ó —É—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤
        const newFundingPlan: FundingPlanItem[] = []
        let newCurrentDay = 1
        
        for (const [type, option] of Object.entries(selectedOptions)) {
          if (option) {
            const constructionDuration = getModifiedDuration(type)
            
            // –§–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç—É–ø–∞–µ—Ç –≤ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
            // –ü–ª–∞–Ω —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –¢–û–õ–¨–ö–û –±–∞–∑–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            newFundingPlan.push({
              dayIndex: newCurrentDay,
              amount: option.cost
            })
            
            newCurrentDay += constructionDuration
          }
        }
        
        console.log(`üí∞ –ü–ª–∞–Ω —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω –¥–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –ë–ï–ó —É—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤: ${affectedElement} +${additionalDuration} –¥–Ω–µ–π`)
        set({ fundingPlan: newFundingPlan })
      },

      preserveIssuedHistory: (newPaymentSchedule: PaymentScheduleItem[]) => {
        const { paymentSchedule: currentPaymentSchedule } = get()
        
        // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö issued –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ dayIndex
        const issuedHistory = new Map<number, number>()
        currentPaymentSchedule.forEach(payment => {
          if (payment.issued !== null) {
            issuedHistory.set(payment.dayIndex, payment.issued)
          }
        })
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ issued –∑–Ω–∞—á–µ–Ω–∏—è –∫ –Ω–æ–≤–æ–º—É –≥—Ä–∞—Ñ–∏–∫—É
        const updatedPaymentSchedule = newPaymentSchedule.map(payment => {
          const savedIssued = issuedHistory.get(payment.dayIndex)
          if (savedIssued !== undefined) {
            return { ...payment, issued: savedIssued }
          }
          return payment
        })
        
        console.log(`üìã –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è issued –∑–Ω–∞—á–µ–Ω–∏–π: ${issuedHistory.size} –∑–∞–ø–∏—Å–µ–π`)
        return updatedPaymentSchedule
      },

      getModifiedDuration: (constructionType: string) => {
        const { selectedOptions, constructionDurationModifications } = get()
        const option = selectedOptions[constructionType]
        if (!option) return 0
        
        const baseDuration = option.duration
        const modification = constructionDurationModifications[constructionType] || 0
        return baseDuration + modification
      },

      addDurationModification: (constructionType: string, additionalDuration: number) => {
        set((state) => ({
          constructionDurationModifications: {
            ...state.constructionDurationModifications,
            [constructionType]: (state.constructionDurationModifications[constructionType] || 0) + additionalDuration
          }
        }))
        console.log(`‚è±Ô∏è –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ${constructionType}: +${additionalDuration} –¥–Ω–µ–π (–æ–±—â–µ–µ: +${(get().constructionDurationModifications[constructionType] || 0) + additionalDuration})`)
      },

      addIdleDays: (constructionType: string, idleDays: number) => {
        const { paymentSchedule, selectedOptions } = get()
        const option = selectedOptions[constructionType]
        if (!option) return

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ —ç—Ç–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        const constructionPayments = paymentSchedule
          .filter(p => p.construction === constructionType)
          .sort((a, b) => b.dayIndex - a.dayIndex)
        
        if (constructionPayments.length === 0) return

        const lastDay = constructionPayments[0].dayIndex
        const newPaymentSchedule = [...paymentSchedule]

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –ø—Ä–æ—Å—Ç–æ—è –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–Ω—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
        for (let i = 1; i <= idleDays; i++) {
          const idleDay = lastDay + i
          newPaymentSchedule.push({
            dayIndex: idleDay,
            amount: 0, // –í –¥–Ω–∏ –ø—Ä–æ—Å—Ç–æ—è –Ω–µ —Ç—Ä–∞—Ç–∏–º –¥–µ–Ω—å–≥–∏
            issued: 0, // –ü—Ä–æ—Å—Ç–æ–π
            construction: constructionType,
            procent: constructionPayments[0].procent, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç
            overallPrice: option.cost,
            overallDuration: option.duration
          })
        }

        console.log(`‚è∏Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–æ ${idleDays} –¥–Ω–µ–π –ø—Ä–æ—Å—Ç–æ—è –¥–ª—è ${constructionType} (–¥–Ω–∏ ${lastDay + 1}-${lastDay + idleDays})`)
        set({ paymentSchedule: newPaymentSchedule })
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        get().restoreFromHistory()
      },

      addToHistory: (day: PaymentScheduleItem) => {
        set((state) => {
          // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º –∂–µ dayIndex –µ—Å–ª–∏ –µ—Å—Ç—å
          const filteredHistory = state.history.filter(h => h.dayIndex !== day.dayIndex)
          return {
            history: [...filteredHistory, day]
          }
        })
        console.log(`üìù –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏—é: –¥–µ–Ω—å ${day.dayIndex}`)
      },

      restoreFromHistory: () => {
        const { paymentSchedule, history } = get()
        
        // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ dayIndex
        const historyMap = new Map<number, PaymentScheduleItem>()
        history.forEach(day => {
          historyMap.set(day.dayIndex, day)
        })
        
        // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ paymentSchedule –Ω–∞ –∑–∞–ø–∏—Å–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        const restoredPaymentSchedule = paymentSchedule.map(payment => {
          const historyDay = historyMap.get(payment.dayIndex)
          return historyDay || payment
        })
        
        console.log(`üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏: ${historyMap.size} –∑–∞–ø–∏—Å–µ–π`)
        set({ paymentSchedule: restoredPaymentSchedule })
      }
    }),
    {
      name: 'fact-storage',
      storage: {
        getItem: (name) => {
          const str = sessionStorage.getItem(name)
          return str ? JSON.parse(str) : null
        },
        setItem: (name, value) => {
          sessionStorage.setItem(name, JSON.stringify(value))
        },
        removeItem: (name) => {
          sessionStorage.removeItem(name)
        }
      }
    }
  )
)
