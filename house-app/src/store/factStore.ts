import { create } from "zustand";
import { persist } from "zustand/middleware";
import type { ConstructionOption, Risk } from "../constants";
import { RISKS } from "../constants";
import { usePlanStore } from "./store";

export interface Period {
  id: number;
  startDay: number;
  endDay: number;
  risk: Risk | null;
  selectedSolution: "solution" | "alternative" | null;
  isProtected: boolean;
}

export interface PaymentScheduleItem {
  dayIndex: number;
  amount: number;
  issued: number | null;
  construction: string | null;
  daysRequired: number;
  daysPayed: number;
  overallPrice: number;
  overallDuration: number;
}

export interface FundingPlanItem {
  dayIndex: number;
  amount: number;
}

export interface FactState {
  selectedOptions: Record<string, ConstructionOption | null>;
  budget: number;
  duration: number;
  periods: Period[];
  currentPeriodIndex: number;
  paymentSchedule: PaymentScheduleItem[];
  fundingPlan: FundingPlanItem[];
  history: PaymentScheduleItem[];
  piggyBank: number;
  planningRemainder: number;
  constructionDurationModifications: Record<string, number>;

  initializeFromPlan: () => void;
  selectOption: (constructionType: string, option: ConstructionOption) => void;
  clearSelection: (constructionType: string) => void;
  getRemainingBudget: () => number;
  getRemainingDuration: () => number;
  getTotalCost: () => number;
  getTotalDuration: () => number;
  getRiskCosts: () => number;
  getRiskDuration: () => number;
  setCurrentPeriod: (index: number) => void;
  selectRiskSolution: (
    periodId: number,
    solution: "solution" | "alternative"
  ) => void;
  generatePeriods: () => void;
  assignRandomRisk: (periodId: number) => void;
  generatePaymentSchedule: () => void;
  generateFundingPlan: () => void;
  processDay: (day: number) => void;
  requestMoney: (amount: number) => void;
  moveToNextPeriod: () => void;
  resetFact: () => void;
  recalculatePaymentSchedule: () => void;
  recalculateFundingPlan: () => void;
  recalculatePaymentScheduleForAlternative: (
    affectedElement: string,
    additionalDuration: number
  ) => void;
  recalculateFundingPlanForAlternative: (
    affectedElement: string,
    additionalDuration: number
  ) => void;
  preserveIssuedHistory: (
    newPaymentSchedule: PaymentScheduleItem[]
  ) => PaymentScheduleItem[];
  restoreFromHistory: () => void;
  addToHistory: (day: PaymentScheduleItem) => void;
  getModifiedDuration: (constructionType: string) => number;
  addDurationModification: (
    constructionType: string,
    additionalDuration: number
  ) => void;
  addIdleDays: (constructionType: string, idleDays: number) => void;
  insertDayAt: (insertDay: number, newDay: PaymentScheduleItem) => void;
  updateConstructionCost: (
    constructionType: string,
    additionalCost: number
  ) => void;
  shouldContinueProcessing: (day: number) => boolean;
}

export const useFactStore = create<FactState>()(
  persist(
    (set, get) => ({
      selectedOptions: {},
      budget: 50000,
      duration: 90,
      periods: [],
      currentPeriodIndex: 0,
      paymentSchedule: [],
      fundingPlan: [],
      history: [],
      piggyBank: 0,
      planningRemainder: 0,
      constructionDurationModifications: {},

      initializeFromPlan: () => {
        const planStore = usePlanStore.getState();
        const totalCost = Object.values(planStore.selectedOptions)
          .filter((option): option is ConstructionOption => option !== null)
          .reduce((total, option) => total + option.cost, 0);
        const planningRemainder = planStore.budget - totalCost;

        set({
          selectedOptions: { ...planStore.selectedOptions },
          budget: planStore.budget,
          duration: planStore.duration,
          piggyBank: 0,
          planningRemainder: planningRemainder,
        });

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω—ã –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è selectedOptions
        setTimeout(() => {
          get().generatePeriods();
          get().generateFundingPlan();
          get().generatePaymentSchedule();

          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º —Ä–∏—Å–∫ –Ω–∞ –ø–µ—Ä–≤—ã–π –ø–µ—Ä–∏–æ–¥
          const { periods, assignRandomRisk } = get();
          if (periods.length > 0) {
            assignRandomRisk(periods[0].id);
            //console.log(`üé≤ –†–∏—Å–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –ø–µ—Ä–∏–æ–¥ 1 (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)`)
          }
        }, 0);
      },

      selectOption: (constructionType: string, option: ConstructionOption) => {
        set((state) => ({
          selectedOptions: {
            ...state.selectedOptions,
            [constructionType]: option,
          },
        }));

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω—ã –∏ –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–ø—Ü–∏–π
        setTimeout(() => {
          const { selectedOptions, budget } = get();
          const totalCost = Object.values(selectedOptions)
            .filter((opt): opt is ConstructionOption => opt !== null)
            .reduce((total, opt) => total + opt.cost, 0);
          const planningRemainder = budget - totalCost;

          set({ planningRemainder });
          get().generateFundingPlan();
          get().generatePaymentSchedule();
        }, 0);
      },

      clearSelection: (constructionType: string) => {
        set((state) => {
          const newSelectedOptions = { ...state.selectedOptions };
          delete newSelectedOptions[constructionType];
          return { selectedOptions: newSelectedOptions };
        });
      },

      getTotalCost: () => {
        const { selectedOptions } = get();
        return Object.values(selectedOptions)
          .filter((option): option is ConstructionOption => option !== null)
          .reduce((total, option) => total + option.cost, 0);
      },

      getTotalDuration: () => {
        const { selectedOptions } = get();
        return Object.values(selectedOptions)
          .filter((option): option is ConstructionOption => option !== null)
          .reduce((total, option) => total + option.duration, 0);
      },

      getRiskCosts: () => {
        const { periods } = get();
        return periods
          .filter(
            (period) => period.risk && period.selectedSolution === "solution"
          )
          .reduce((total, period) => total + (period.risk?.cost || 0), 0);
      },

      getRiskDuration: () => {
        const { periods } = get();
        return periods
          .filter(
            (period) => period.risk && period.selectedSolution === "solution"
          )
          .reduce((total, period) => total + (period.risk?.duration || 0), 0);
      },

      getRemainingBudget: () => {
        const { budget, getTotalCost } = get();
        return budget - getTotalCost();
      },

      getRemainingDuration: () => {
        const { duration, getTotalDuration } = get();
        return duration - getTotalDuration();
      },

      setCurrentPeriod: (index: number) => {
        set({ currentPeriodIndex: index });
      },

      selectRiskSolution: (
        periodId: number,
        solution: "solution" | "alternative"
      ) => {
        const { periods } = get();
        const period = periods.find((p) => p.id === periodId);

        console.log(
          `üéØ –†–µ—à–µ–Ω–∏–µ –ø–æ —Ä–∏—Å–∫—É: ${
            solution === "solution" ? "–†–µ—à–µ–Ω–∏–µ" : "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞"
          } | –ü–µ—Ä–∏–æ–¥ ${periodId}`
        );

        set((state) => ({
          periods: state.periods.map((period: Period) =>
            period.id === periodId
              ? { ...period, selectedSolution: solution }
              : period
          ),
        }));

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –≤—ã–±–æ—Ä–∞ —Ä–µ—à–µ–Ω–∏—è
        if (period && period.risk) {
          if (solution === "solution") {
            // –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ - –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–Ω–µ–π —Å –∑–∞—Ç—Ä–æ–Ω—É—Ç–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
            get().updateConstructionCost(
              period.risk.affectedElement,
              period.risk.cost
            );
            //get().recalculateFundingPlan();
          } else {
            const additionalDuration = Math.ceil(period.risk.duration);
            if (additionalDuration > 0) {
              get().recalculatePaymentScheduleForAlternative(
                period.risk.affectedElement,
                additionalDuration
              );
              //get().recalculateFundingPlanForAlternative(
              //  period.risk.affectedElement,
              //  additionalDuration
              //);
            }
          }
        }
      },

      generatePeriods: () => {
        const { getTotalDuration, getModifiedDuration, selectedOptions } =
          get();

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π
        let totalDuration = 0;
        Object.entries(selectedOptions).forEach(
          ([constructionType, option]) => {
            if (option) {
              const modifiedDuration = getModifiedDuration(constructionType);
              totalDuration += modifiedDuration;
            }
          }
        );

        const periodCount = 5; // –í—Å–µ–≥–¥–∞ 5 –ø–µ—Ä–∏–æ–¥–æ–≤
        const basePeriodDuration = Math.floor(totalDuration / periodCount);
        const remainder = totalDuration % periodCount;

        const periods: Period[] = [];
        let currentDay = 1;

        for (let i = 0; i < periodCount; i++) {
          // –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥ –º–æ–∂–µ—Ç –±—ã—Ç—å —á—É—Ç—å –±–æ–ª—å—à–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Å—Ç–∞—Ç–æ–∫
          const periodDuration =
            i === periodCount - 1
              ? basePeriodDuration + remainder
              : basePeriodDuration;

          const endDay = currentDay + periodDuration - 1;

          periods.push({
            id: i + 1,
            startDay: currentDay,
            endDay: endDay,
            risk: null,
            selectedSolution: null,
            isProtected: false,
          });

          currentDay = endDay + 1;
        }

        set({ periods });
      },

      assignRandomRisk: (periodId: number) => {
        const { selectedOptions, periods } = get();
        const period = periods.find((p) => p.id === periodId);

        if (!period) return;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å—Ç—Ä–æ–∏—Ç—Å—è –≤ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥
        const currentDay = period.startDay;
        let currentConstructionDay = 1;
        let currentConstructionType = null;
        let currentConstructionStyle = null;

        for (const [type, option] of Object.entries(selectedOptions)) {
          if (
            option &&
            currentDay >= currentConstructionDay &&
            currentDay < currentConstructionDay + option.duration
          ) {
            currentConstructionType = type;
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∏–ª—å –∏–∑ —Ç–∏–ø–∞ –æ–ø—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "2 –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å" -> "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å")
            currentConstructionStyle = option.type
              .split(" ")
              .slice(1)
              .join(" ");
            break;
          }
          if (option) {
            currentConstructionDay += option.duration;
          }
        }

        // –ë–µ—Ä–µ–º –í–°–ï —Ä–∏—Å–∫–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        const availableRisks = RISKS.filter((risk) => {
          return risk.affectedElement === currentConstructionType;
        });

        if (availableRisks.length === 0) {
          console.log(`‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤ –¥–ª—è ${currentConstructionType}`);
          return;
        }

        // –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –ª—é–±–æ–π —Ä–∏—Å–∫ –¥–ª—è —ç—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        const randomRisk =
          availableRisks[Math.floor(Math.random() * availableRisks.length)];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—â–∏—â–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç —ç—Ç–æ–≥–æ —Ä–∏—Å–∫–∞
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—â–∏—â–µ–Ω, –µ—Å–ª–∏ —Å—Ç–∏–ª—å —Ä–∏—Å–∫–∞ –ù–ï —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º
        const isProtected =
          !currentConstructionStyle ||
          !randomRisk.affectedStyle
            .split(", ")
            .map((s) => s.trim())
            .includes(currentConstructionStyle);

        console.log(
          `üé≤ –í—ã–±—Ä–∞–Ω —Ä–∏—Å–∫ ${
            randomRisk.id
          } –¥–ª—è ${currentConstructionType} (${currentConstructionStyle}) | –ó–∞—â–∏—Ç–∞: ${
            isProtected ? "–î–ê" : "–ù–ï–¢"
          }`
        );

        set((state) => ({
          periods: state.periods.map((period: Period) =>
            period.id === periodId
              ? { ...period, risk: randomRisk, isProtected }
              : period
          ),
        }));
      },

      generatePaymentSchedule: () => {
        const { selectedOptions, periods, getModifiedDuration } = get();
        const paymentSchedule: PaymentScheduleItem[] = [];

        // –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –≤—ã–ø–ª–∞—Ç - —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ –≤—Å–µ–º –¥–Ω—è–º —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
        let currentDay = 1;
        Object.entries(selectedOptions).forEach(
          ([constructionType, option]) => {
            if (option) {
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
              const modifiedDuration = getModifiedDuration(constructionType);

              // –ù–∞—Ö–æ–¥–∏–º —Ä–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–ª–∏—è—é—Ç –Ω–∞ —ç—Ç—É –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
              const constructionRisks = periods.filter(
                (period) =>
                  period.risk &&
                  period.selectedSolution === "solution" &&
                  period.risk.affectedElement === constructionType
              );

              // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º —Ä–∏—Å–∫–æ–≤
              const totalRiskDuration = constructionRisks.reduce(
                (sum, period) => sum + (period.risk?.duration || 0),
                0
              );
              const overallDuration = modifiedDuration + totalRiskDuration;

              // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º —Ä–∏—Å–∫–æ–≤
              const totalRiskCost = constructionRisks.reduce(
                (sum, period) => sum + (period.risk?.cost || 0),
                0
              );
              const overallPrice = option.cost + totalRiskCost;

              const dailyAmount = overallPrice / overallDuration;

              // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å—Ç–µ–Ω - —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –¥–≤–∞ –ø–µ—Ä–∏–æ–¥–∞
              if (constructionType === "–°—Ç–µ–Ω—ã") {
                const firstHalfDuration = Math.floor(overallDuration / 2);
                const secondHalfDuration = overallDuration - firstHalfDuration;
                const firstHalfPrice = Math.floor(overallPrice / 2);
                const secondHalfPrice = overallPrice - firstHalfPrice;

                // –ü–µ—Ä–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ —Å—Ç–µ–Ω
                for (let i = 0; i < firstHalfDuration; i++) {
                  paymentSchedule.push({
                    dayIndex: currentDay + i,
                    amount: Math.floor(firstHalfPrice / firstHalfDuration),
                    issued: null,
                    construction: constructionType,
                    daysRequired: overallDuration,
                    daysPayed: 0,
                    overallPrice: overallPrice,
                    overallDuration: overallDuration,
                  });
                }
                currentDay += firstHalfDuration;

                // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏ —Å—Ç–µ–Ω
                const ceilingOption = selectedOptions["–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ"];
                if (ceilingOption) {
                  const ceilingDuration = getModifiedDuration("–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ");
                  const ceilingRisks = periods.filter(
                    (period) =>
                      period.risk &&
                      period.selectedSolution === "solution" &&
                      period.risk.affectedElement === "–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ"
                  );
                  const totalCeilingRiskDuration = ceilingRisks.reduce(
                    (sum, period) => sum + (period.risk?.duration || 0),
                    0
                  );
                  const totalCeilingRiskCost = ceilingRisks.reduce(
                    (sum, period) => sum + (period.risk?.cost || 0),
                    0
                  );
                  const overallCeilingDuration =
                    ceilingDuration + totalCeilingRiskDuration;
                  const overallCeilingPrice =
                    ceilingOption.cost + totalCeilingRiskCost;
                  const dailyCeilingAmount =
                    overallCeilingPrice / overallCeilingDuration;

                  for (let i = 0; i < overallCeilingDuration; i++) {
                    paymentSchedule.push({
                      dayIndex: currentDay + i,
                      amount: Math.floor(dailyCeilingAmount),
                      issued: null,
                      construction: "–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ",
                      daysRequired: overallCeilingDuration,
                      daysPayed: 0,
                      overallPrice: overallCeilingPrice,
                      overallDuration: overallCeilingDuration,
                    });
                  }
                  currentDay += overallCeilingDuration;
                }

                // –í—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ —Å—Ç–µ–Ω
                for (let i = 0; i < secondHalfDuration; i++) {
                  paymentSchedule.push({
                    dayIndex: currentDay + i,
                    amount: Math.floor(secondHalfPrice / secondHalfDuration),
                    issued: null,
                    construction: constructionType,
                    daysRequired: overallDuration,
                    daysPayed: 0,
                    overallPrice: overallPrice,
                    overallDuration: overallDuration,
                  });
                }
                currentDay += secondHalfDuration;
              } else if (constructionType !== "–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ") {
                // –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π (–∫—Ä–æ–º–µ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤ –ª–æ–≥–∏–∫–µ —Å—Ç–µ–Ω)
                for (let i = 0; i < overallDuration; i++) {
                  paymentSchedule.push({
                    dayIndex: currentDay + i,
                    amount: Math.floor(dailyAmount),
                    issued: null,
                    construction: constructionType,
                    daysRequired: overallDuration,
                    daysPayed: 0, // issued = null, –∑–Ω–∞—á–∏—Ç –¥–Ω–µ–π –æ–ø–ª–∞—á–µ–Ω–æ 0
                    overallPrice: overallPrice,
                    overallDuration: overallDuration,
                  });
                }
                currentDay += overallDuration;
              }
            }
          }
        );

        console.log(
          `üìä –ì—Ä–∞—Ñ–∏–∫ –≤—ã–ø–ª–∞—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ${
            paymentSchedule.length
          } –¥–Ω–µ–π | –û–±—â–∞—è —Å—É–º–º–∞: ${paymentSchedule.reduce(
            (sum, p) => sum + p.amount,
            0
          )} —Ä—É–±.`
        );
        set({ paymentSchedule });

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        get().restoreFromHistory();
      },

      generateFundingPlan: () => {
        const { selectedOptions, getModifiedDuration } = get();
        const fundingPlan: FundingPlanItem[] = [];

        // –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è - –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –≤ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        let currentDay = 1;
        Object.entries(selectedOptions).forEach(
          ([constructionType, option]) => {
            if (option) {
              const modifiedDuration = getModifiedDuration(constructionType);

              // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å—Ç–µ–Ω - —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –¥–≤–∞ –ø–µ—Ä–∏–æ–¥–∞
              if (constructionType === "–°—Ç–µ–Ω—ã") {
                const firstHalfDuration = Math.floor(modifiedDuration / 2);
                const secondHalfDuration = modifiedDuration - firstHalfDuration;

                // –ü–µ—Ä–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ —Å—Ç–µ–Ω
                fundingPlan.push({
                  dayIndex: currentDay,
                  amount: Math.floor(option.cost / 2),
                });
                currentDay += firstHalfDuration;

                // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏ —Å—Ç–µ–Ω
                const ceilingOption = selectedOptions["–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ"];
                if (ceilingOption) {
                  fundingPlan.push({
                    dayIndex: currentDay,
                    amount: ceilingOption.cost,
                  });
                  currentDay += getModifiedDuration("–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ");
                }

                // –í—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ —Å—Ç–µ–Ω
                fundingPlan.push({
                  dayIndex: currentDay,
                  amount: option.cost - Math.floor(option.cost / 2),
                });
                currentDay += secondHalfDuration;
              } else if (constructionType !== "–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ") {
                // –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π (–∫—Ä–æ–º–µ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤ –ª–æ–≥–∏–∫–µ —Å—Ç–µ–Ω)
                fundingPlan.push({
                  dayIndex: currentDay,
                  amount: option.cost,
                });
                currentDay += modifiedDuration;
              }
            }
          }
        );

        console.log(
          `üí∞ –ü–ª–∞–Ω —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ${
            fundingPlan.length
          } —Ç—Ä–∞–Ω—à–µ–π | –û–±—â–∞—è —Å—É–º–º–∞: ${fundingPlan.reduce(
            (sum, f) => sum + f.amount,
            0
          )} —Ä—É–±.`
        );
        set({ fundingPlan });
      },

      processDay: (day: number) => {
        const {
          fundingPlan,
          piggyBank,
          paymentSchedule,
          periods,
          currentPeriodIndex,
        } = get();

        console.log(`üìÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–Ω—è ${day}`);
        console.log(`üè¶ –ö–£–ë–´–®–ö–ê –î–û –û–ü–ï–†–ê–¶–ò–ô: ${piggyBank} —Ä—É–±.`);

        // –ó–∞—á–∏—Å–ª—è–µ–º –¥–µ–Ω—å–≥–∏ –ø–æ –ø–ª–∞–Ω—É —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
        const dayFunding = fundingPlan.filter(
          (funding) => funding.dayIndex === day
        );
        const totalIncoming = dayFunding.reduce(
          (sum, funding) => sum + funding.amount,
          0
        );

        if (totalIncoming > 0) {
          console.log(
            `üí∞ –ü–û–°–¢–£–ü–õ–ï–ù–ò–ï –í –ö–£–ë–´–®–ö–£: +${totalIncoming} —Ä—É–±. (–¥–µ–Ω—å ${day})`
          );
          console.log(
            `üè¶ –ö–£–ë–´–®–ö–ê –ü–û–°–õ–ï –ü–û–°–¢–£–ü–õ–ï–ù–ò–Ø: ${piggyBank + totalIncoming} —Ä—É–±.`
          );
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É–±—ã—à–∫—É
        set({ piggyBank: piggyBank + totalIncoming });
        console.log(`üè¶ –ö–£–ë–´–®–ö–ê –û–ë–ù–û–í–õ–ï–ù–ê: ${piggyBank + totalIncoming} —Ä—É–±.`);

        // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å–∏ –≤ paymentSchedule –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
        const dayPayments = paymentSchedule.filter(
          (payment) => payment.dayIndex === day
        );

        if (dayPayments.length === 0) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É
          if (get().shouldContinueProcessing(day)) {
            console.log(
              `üìÖ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ (–¥–µ–Ω—å ${day})`
            );
            return;
          }

          console.log(`‚ö†Ô∏è –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –≥—Ä–∞—Ñ–∏–∫–µ –≤—ã–ø–ª–∞—Ç –¥–ª—è –¥–Ω—è ${day}`);
          return;
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
        const currentPiggyBank = get().piggyBank;

        let constructionsNeedingIdleDay: string[] = [];

        set((state) => {
          const newPaymentSchedule = state.paymentSchedule.map((payment) => {
            if (payment.dayIndex === day && payment.issued === null) {
              const requiredMoney = payment.amount;
              const isIdle = currentPiggyBank < requiredMoney;
              const issuedMoney = isIdle ? 0 : requiredMoney;

              console.log(
                `üí≥ –¢–†–ï–ë–£–ï–¢–°–Ø: ${requiredMoney} —Ä—É–±. | –í–´–î–ê–ù–û: ${issuedMoney} —Ä—É–±. | –ü–†–û–°–¢–û–ô: ${
                  isIdle ? "–î–ê" : "–ù–ï–¢"
                }`
              );

              if (issuedMoney > 0) {
                console.log(
                  `üí∏ –°–ü–ò–°–ê–ù–ò–ï –° –ö–£–ë–´–®–ö–ò: -${issuedMoney} —Ä—É–±. (–¥–µ–Ω—å ${day})`
                );
              }

              // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–Ω–∏ –æ–ø–ª–∞—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–¥–∞—á–∞ –¥–µ–Ω–µ–≥
              let newDaysPayed = 0;
              if (issuedMoney > 0) {
                // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ (–≤–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å)
                const constructionPayments = state.paymentSchedule
                  .filter(
                    (p) =>
                      p.construction === payment.construction &&
                      p.dayIndex <= day
                  )
                  .sort((a, b) => a.dayIndex - b.dayIndex);
                const constructionZeroPayments = constructionPayments.filter(
                  (p) => p.issued === 0
                );

                newDaysPayed =
                  constructionPayments.length - constructionZeroPayments.length;
                console.log(
                  `üìà –ü–†–û–ì–†–ï–°–°: ${newDaysPayed}/${payment.overallDuration} –¥–Ω–µ–π –æ–ø–ª–∞—á–µ–Ω–æ (–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ${payment.construction})`
                );

                // –û–±—ä—è—Å–Ω—è–µ–º –ª–æ–≥–∏–∫—É —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
                if (payment.construction === "–§—É–Ω–¥–∞–º–µ–Ω—Ç" && newDaysPayed > 10) {
                  console.log(
                    `üèóÔ∏è –õ–û–ì–ò–ö–ê –°–¢–†–û–ò–¢–ï–õ–¨–°–¢–í–ê: –§—É–Ω–¥–∞–º–µ–Ω—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω –Ω–∞ ${newDaysPayed} –¥–Ω–µ–π (–±–æ–ª—å—à–µ 100%) - —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç –±—ã–ª –Ω–µ–¥–æ—Å—Ç—Ä–æ–µ–Ω, –ø–æ—Ç–æ–º –Ω–∞—á–∞–ª–∏—Å—å —Å—Ç–µ–Ω—ã, –∞ –∑–∞—Ç–µ–º —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç –¥–æ—Å—Ç—Ä–æ–∏–ª–∏`
                  );
                } else if (
                  payment.construction === "–°—Ç–µ–Ω—ã" &&
                  newDaysPayed > 0
                ) {
                  console.log(
                    `üèóÔ∏è –õ–û–ì–ò–ö–ê –°–¢–†–û–ò–¢–ï–õ–¨–°–¢–í–ê: –ù–∞—á–∞—Ç–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ —Å—Ç–µ–Ω (${newDaysPayed} –¥–Ω–µ–π –æ–ø–ª–∞—á–µ–Ω–æ) - —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ –Ω–µ–¥–æ—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞`
                  );
                }
              } else if (issuedMoney === 0) {
                // –ü—Ä–æ—Å—Ç–æ–π - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π
                const constructionPayments = state.paymentSchedule
                  .filter(
                    (p) =>
                      p.construction === payment.construction &&
                      p.dayIndex < day
                  )
                  .sort((a, b) => b.dayIndex - a.dayIndex);

                if (constructionPayments.length > 0) {
                  const lastPayment = constructionPayments[0];
                  if (lastPayment.issued !== null) {
                    newDaysPayed = lastPayment.daysPayed;
                    console.log(
                      `‚è∏Ô∏è –ü–†–û–°–¢–û–ô: –¥–Ω–µ–π –æ–ø–ª–∞—á–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${newDaysPayed} (–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ${payment.construction})`
                    );
                  }
                }

                // –ü–æ–º–µ—á–∞–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–Ω—è –¥–æ—Å—Ç—Ä–æ–π–∫–∏
                if (
                  !constructionsNeedingIdleDay.includes(payment.construction)
                ) {
                  constructionsNeedingIdleDay.push(payment.construction);
                }
              }

              const updatedPayment = {
                ...payment,
                issued: issuedMoney,
                daysPayed: newDaysPayed,
              };

              // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
              get().addToHistory(updatedPayment);

              return updatedPayment;
            }
            return payment;
          });

          // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É–±—ã—à–∫—É –ø–æ—Å–ª–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
          const totalIssued = dayPayments.reduce((sum, payment) => {
            if (payment.issued === null) {
              const requiredMoney = payment.amount;
              const isIdle = currentPiggyBank < requiredMoney;
              const issuedMoney = isIdle ? 0 : requiredMoney;
              return sum + issuedMoney;
            }
            return sum + payment.issued;
          }, 0);

          console.log(
            `üè¶ –ö–£–ë–´–®–ö–ê –ü–û–°–õ–ï –°–ü–ò–°–ê–ù–ò–Ø: ${currentPiggyBank - totalIssued} —Ä—É–±.`
          );

          return {
            paymentSchedule: newPaymentSchedule,
            piggyBank: currentPiggyBank - totalIssued,
          };
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –¥–æ—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π —Å –ø—Ä–æ—Å—Ç–æ–º
        if (constructionsNeedingIdleDay.length > 0) {
          constructionsNeedingIdleDay.forEach((constructionType) => {
            get().addIdleDays(constructionType, 1);
          });
        }
      },

      requestMoney: (amount: number) => {
        const { planningRemainder, piggyBank } = get();
        if (amount <= planningRemainder) {
          console.log(`üè¶ –ö–£–ë–´–®–ö–ê –î–û –ó–ê–ü–†–û–°–ê: ${piggyBank} —Ä—É–±.`);
          console.log(`üí∞ –ó–ê–ü–†–û–° –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –°–†–ï–î–°–¢–í: +${amount} —Ä—É–±.`);
          console.log(`üè¶ –ö–£–ë–´–®–ö–ê –ü–û–°–õ–ï –ó–ê–ü–†–û–°–ê: ${piggyBank + amount} —Ä—É–±.`);

          set((state) => ({
            piggyBank: state.piggyBank + amount,
            planningRemainder: state.planningRemainder - amount,
          }));
        } else {
          console.log(
            `‚ùå –ó–ê–ü–†–û–° –û–¢–ö–õ–û–ù–ï–ù: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–º –æ—Å—Ç–∞—Ç–∫–µ (${planningRemainder} —Ä—É–±.)`
          );
        }
      },

      moveToNextPeriod: () => {
        const {
          currentPeriodIndex,
          periods,
          assignRandomRisk,
          paymentSchedule,
        } = get();

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–µ—Ä–∏–æ–¥—É
        const nextPeriodIndex = currentPeriodIndex + 1;

        console.log(`üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–µ—Ä–∏–æ–¥—É ${nextPeriodIndex + 1}`);

        set({
          currentPeriodIndex: nextPeriodIndex,
        });

        // –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–∏—Å–∫ –Ω–∞ –Ω–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (nextPeriodIndex < periods.length) {
          const nextPeriod = periods[nextPeriodIndex];
          if (nextPeriod) {
            assignRandomRisk(nextPeriod.id);
            console.log(`üé≤ –†–∏—Å–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –ø–µ—Ä–∏–æ–¥ ${nextPeriodIndex + 1}`);
          }
        } else {
          // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ –∫–æ–Ω—Ü–∞ paymentSchedule
          const maxDayInSchedule = Math.max(
            ...paymentSchedule.map((p) => p.dayIndex)
          );
          console.log(
            `üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ –¥–Ω—è ${maxDayInSchedule}`
          );

          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏
          const currentPeriod = periods[periods.length - 1];
          if (currentPeriod) {
            const startDay = currentPeriod.endDay + 1;
            for (let day = startDay; day <= maxDayInSchedule; day++) {
              console.log(
                `üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–Ω—è ${day} –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞`
              );
              get().processDay(day);
            }
          }
        }
      },

      resetFact: () => {
        set({
          selectedOptions: {},
          budget: 50000,
          duration: 90,
          periods: [],
          currentPeriodIndex: 0,
          paymentSchedule: [],
          fundingPlan: [],
          history: [],
          piggyBank: 0,
          planningRemainder: 0,
          constructionDurationModifications: {},
        });
      },

      recalculatePaymentSchedule: () => {
        const {
          selectedOptions,
          periods,
          currentPeriodIndex,
          paymentSchedule,
          history,
        } = get();

        // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥
        const currentPeriod = periods[currentPeriodIndex];
        if (!currentPeriod) {
          console.log("‚ùå –¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω");
          return;
        }

        const startDay = currentPeriod.startDay;
        console.log(
          `üìä –ü–µ—Ä–µ—Å—á–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∞ –≤—ã–ø–ª–∞—Ç —Å –¥–Ω—è ${startDay} (–ø–µ—Ä–∏–æ–¥ ${
            currentPeriodIndex + 1
          })`
        );

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–æ –¥–Ω—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞
        const preservedPayments = paymentSchedule.filter(
          (payment) => payment.dayIndex < startDay
        );

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ –Ω–∞—á–∏–Ω–∞—è —Å –¥–Ω—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞
        const newPayments: PaymentScheduleItem[] = [];
        let currentDay = startDay;

        Object.entries(selectedOptions).forEach(
          ([constructionType, option]) => {
            if (option) {
              // –ù–∞—Ö–æ–¥–∏–º —Ä–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–ª–∏—è—é—Ç –Ω–∞ —ç—Ç—É –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
              const constructionRisks = periods.filter(
                (period) =>
                  period.risk &&
                  period.selectedSolution === "solution" &&
                  period.risk.affectedElement === constructionType
              );

              const overallDuration = option.duration; // –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–Ω—å–≥–∞–º–∏ –ø–æ—Ä–µ—à–∞–ª, –µ–±–∞–Ω—ã–π –µ–≥–æ —Ä–æ—Ç, –Ω–∏–∫–∞–∫–∏—Ö –¥–æ–±–∞–≤–æ—á–Ω—ã—Ö –¥–Ω–µ–π

              // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º —Ä–∏—Å–∫–æ–≤
              const totalRiskCost = constructionRisks.reduce(
                (sum, period) => sum + (period.risk?.cost || 0),
                0
              );
              const overallPrice = option.cost + totalRiskCost;

              // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å—Ç–µ–Ω - —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –¥–≤–∞ –ø–µ—Ä–∏–æ–¥–∞
              if (constructionType === "–°—Ç–µ–Ω—ã") {
                const firstHalfDuration = Math.floor(overallDuration / 2);
                const secondHalfDuration = overallDuration - firstHalfDuration;
                const firstHalfPrice = Math.floor(overallPrice / 2);
                const secondHalfPrice = overallPrice - firstHalfPrice;

                // –ü–µ—Ä–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ —Å—Ç–µ–Ω
                for (let i = 0; i < firstHalfDuration; i++) {
                  newPayments.push({
                    dayIndex: currentDay + i,
                    amount: Math.floor(firstHalfPrice / firstHalfDuration),
                    issued: null,
                    construction: constructionType,
                    daysRequired: overallDuration,
                    daysPayed: 0,
                    overallPrice: overallPrice,
                    overallDuration: overallDuration,
                  });
                }
                currentDay += firstHalfDuration;

                // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏ —Å—Ç–µ–Ω
                const ceilingOption = selectedOptions["–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ"];
                if (ceilingOption) {
                  const ceilingDuration = ceilingOption.duration;
                  const ceilingRisks = periods.filter(
                    (period) =>
                      period.risk &&
                      period.selectedSolution === "solution" &&
                      period.risk.affectedElement === "–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ"
                  );
                  const totalCeilingRiskDuration = ceilingRisks.reduce(
                    (sum, period) => sum + (period.risk?.duration || 0),
                    0
                  );
                  const totalCeilingRiskCost = ceilingRisks.reduce(
                    (sum, period) => sum + (period.risk?.cost || 0),
                    0
                  );
                  const overallCeilingDuration =
                    ceilingDuration + totalCeilingRiskDuration;
                  const overallCeilingPrice =
                    ceilingOption.cost + totalCeilingRiskCost;
                  const dailyCeilingAmount =
                    overallCeilingPrice / overallCeilingDuration;

                  for (let i = 0; i < overallCeilingDuration; i++) {
                    newPayments.push({
                      dayIndex: currentDay + i,
                      amount: Math.floor(dailyCeilingAmount),
                      issued: null,
                      construction: "–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ",
                      daysRequired: overallCeilingDuration,
                      daysPayed: 0,
                      overallPrice: overallCeilingPrice,
                      overallDuration: overallCeilingDuration,
                    });
                  }
                  currentDay += overallCeilingDuration;
                }

                // –í—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ —Å—Ç–µ–Ω
                for (let i = 0; i < secondHalfDuration; i++) {
                  newPayments.push({
                    dayIndex: currentDay + i,
                    amount: Math.floor(secondHalfPrice / secondHalfDuration),
                    issued: null,
                    construction: constructionType,
                    daysRequired: overallDuration,
                    daysPayed: 0,
                    overallPrice: overallPrice,
                    overallDuration: overallDuration,
                  });
                }
                currentDay += secondHalfDuration;
              } else if (constructionType !== "–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ") {
                // –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π (–∫—Ä–æ–º–µ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π)
                const dailyAmount = overallPrice / overallDuration;
                for (let i = 0; i < overallDuration; i++) {
                  newPayments.push({
                    dayIndex: currentDay + i,
                    amount: Math.floor(dailyAmount),
                    issued: null,
                    construction: constructionType,
                    daysRequired: overallDuration,
                    daysPayed: 0,
                    overallPrice: overallPrice,
                    overallDuration: overallDuration,
                  });
                }
                currentDay += overallDuration;
              }
            }
          }
        );

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏ –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
        let updatedPaymentSchedule = [...preservedPayments, ...newPayments];

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        const historyMap = new Map<number, PaymentScheduleItem>();
        history.forEach((day) => {
          historyMap.set(day.dayIndex, day);
        });

        // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ paymentSchedule –Ω–∞ –∑–∞–ø–∏—Å–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        updatedPaymentSchedule = updatedPaymentSchedule.map((payment) => {
          const historyDay = historyMap.get(payment.dayIndex);
          return historyDay || payment;
        });

        console.log(
          `üìä –ì—Ä–∞—Ñ–∏–∫ –≤—ã–ø–ª–∞—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${preservedPayments.length} –∑–∞–ø–∏—Å–µ–π, –¥–æ–±–∞–≤–ª–µ–Ω–æ ${newPayments.length} –Ω–æ–≤—ã—Ö`
        );
        console.log(`üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏: ${historyMap.size} –∑–∞–ø–∏—Å–µ–π`);
        set({ paymentSchedule: updatedPaymentSchedule });
      },

      recalculateFundingPlan: () => {
        const { selectedOptions, periods, getModifiedDuration } = get();
        const fundingPlan: FundingPlanItem[] = [];

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è –ë–ï–ó —É—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤
        let currentDay = 1;
        Object.entries(selectedOptions).forEach(
          ([constructionType, option]) => {
            if (option) {
              const modifiedDuration = getModifiedDuration(constructionType);

              // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å—Ç–µ–Ω - —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –¥–≤–∞ –ø–µ—Ä–∏–æ–¥–∞
              if (constructionType === "–°—Ç–µ–Ω—ã") {
                const firstHalfDuration = Math.floor(modifiedDuration / 2);
                const secondHalfDuration = modifiedDuration - firstHalfDuration;

                // –ü–µ—Ä–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ —Å—Ç–µ–Ω
                fundingPlan.push({
                  dayIndex: currentDay,
                  amount: Math.floor(option.cost / 2),
                });
                currentDay += firstHalfDuration;

                // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏ —Å—Ç–µ–Ω
                const ceilingOption = selectedOptions["–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ"];
                if (ceilingOption) {
                  fundingPlan.push({
                    dayIndex: currentDay,
                    amount: ceilingOption.cost,
                  });
                  currentDay += getModifiedDuration("–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ");
                }

                // –í—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ —Å—Ç–µ–Ω
                fundingPlan.push({
                  dayIndex: currentDay,
                  amount: option.cost - Math.floor(option.cost / 2),
                });
                currentDay += secondHalfDuration;
              } else if (constructionType !== "–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ") {
                // –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π (–∫—Ä–æ–º–µ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤ –ª–æ–≥–∏–∫–µ —Å—Ç–µ–Ω)
                fundingPlan.push({
                  dayIndex: currentDay,
                  amount: option.cost,
                });
                currentDay += modifiedDuration;
              }
            }
          }
        );

        console.log(
          `üí∞ –ü–ª–∞–Ω —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω –ë–ï–ó —É—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤: ${
            fundingPlan.length
          } —Ç—Ä–∞–Ω—à–µ–π | –û–±—â–∞—è —Å—É–º–º–∞: ${fundingPlan.reduce(
            (sum, f) => sum + f.amount,
            0
          )} —Ä—É–±.`
        );
        set({ fundingPlan });
      },

      recalculatePaymentScheduleForAlternative: (
        affectedElement: string,
        additionalDuration: number
      ) => {
        const {
          selectedOptions,
          addDurationModification,
          getModifiedDuration,
        } = get();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        addDurationModification(affectedElement, additionalDuration);

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ –≤—ã–ø–ª–∞—Ç
        const newPaymentSchedule: PaymentScheduleItem[] = [];
        let newCurrentDay = 1;

        for (const [type, option] of Object.entries(selectedOptions)) {
          if (option) {
            const constructionDuration = getModifiedDuration(type);
            const constructionCost = option.cost;

            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å—Ç–µ–Ω - —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –¥–≤–∞ –ø–µ—Ä–∏–æ–¥–∞
            if (type === "–°—Ç–µ–Ω—ã") {
              const firstHalfDuration = Math.floor(constructionDuration / 2);
              const secondHalfDuration =
                constructionDuration - firstHalfDuration;
              const firstHalfPrice = Math.floor(constructionCost / 2);
              const secondHalfPrice = constructionCost - firstHalfPrice;

              // –ü–µ—Ä–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ —Å—Ç–µ–Ω
              for (let i = 0; i < firstHalfDuration; i++) {
                newPaymentSchedule.push({
                  dayIndex: newCurrentDay + i,
                  amount: Math.floor(firstHalfPrice / firstHalfDuration),
                  issued: null,
                  construction: type,
                  daysRequired: constructionDuration,
                  daysPayed: 0,
                  overallPrice: constructionCost,
                  overallDuration: constructionDuration,
                });
              }
              newCurrentDay += firstHalfDuration;

              // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏ —Å—Ç–µ–Ω
              const ceilingOption = selectedOptions["–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ"];
              if (ceilingOption) {
                const ceilingDuration = getModifiedDuration("–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ");
                const dailyCeilingAmount = ceilingOption.cost / ceilingDuration;

                for (let i = 0; i < ceilingDuration; i++) {
                  newPaymentSchedule.push({
                    dayIndex: newCurrentDay + i,
                    amount: Math.floor(dailyCeilingAmount),
                    issued: null,
                    construction: "–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ",
                    daysRequired: ceilingDuration,
                    daysPayed: 0,
                    overallPrice: ceilingOption.cost,
                    overallDuration: ceilingDuration,
                  });
                }
                newCurrentDay += ceilingDuration;
              }

              // –í—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ —Å—Ç–µ–Ω
              for (let i = 0; i < secondHalfDuration; i++) {
                newPaymentSchedule.push({
                  dayIndex: newCurrentDay + i,
                  amount: Math.floor(secondHalfPrice / secondHalfDuration),
                  issued: null,
                  construction: type,
                  daysRequired: constructionDuration,
                  daysPayed: 0,
                  overallPrice: constructionCost,
                  overallDuration: constructionDuration,
                });
              }
              newCurrentDay += secondHalfDuration;
            } else if (type !== "–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ") {
              // –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π (–∫—Ä–æ–º–µ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π)
              const dailyAmount = constructionCost / constructionDuration;
              for (let i = 0; i < constructionDuration; i++) {
                newPaymentSchedule.push({
                  dayIndex: newCurrentDay + i,
                  amount: Math.floor(dailyAmount),
                  issued: null,
                  construction: type,
                  daysRequired: constructionDuration,
                  daysPayed: 0, // issued = null, –∑–Ω–∞—á–∏—Ç –¥–Ω–µ–π –æ–ø–ª–∞—á–µ–Ω–æ 0
                  overallPrice: constructionCost,
                  overallDuration: constructionDuration,
                });
              }
              newCurrentDay += constructionDuration;
            }
          }
        }

        console.log(
          `üìä –ì—Ä–∞—Ñ–∏–∫ –≤—ã–ø–ª–∞—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω –¥–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã: +${additionalDuration} –¥–Ω–µ–π –¥–ª—è ${affectedElement}`
        );

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é issued –∑–Ω–∞—á–µ–Ω–∏–π
        const updatedPaymentSchedule =
          get().preserveIssuedHistory(newPaymentSchedule);
        set({ paymentSchedule: updatedPaymentSchedule });

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        get().restoreFromHistory();
      },

      recalculateFundingPlanForAlternative: (
        affectedElement: string,
        additionalDuration: number
      ) => {
        const {
          selectedOptions,
          addDurationModification,
          getModifiedDuration,
        } = get();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        addDurationModification(affectedElement, additionalDuration);

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è –ë–ï–ó —É—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤
        const newFundingPlan: FundingPlanItem[] = [];
        let newCurrentDay = 1;

        for (const [type, option] of Object.entries(selectedOptions)) {
          if (option) {
            const constructionDuration = getModifiedDuration(type);

            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å—Ç–µ–Ω - —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –¥–≤–∞ –ø–µ—Ä–∏–æ–¥–∞
            if (type === "–°—Ç–µ–Ω—ã") {
              const firstHalfDuration = Math.floor(constructionDuration / 2);
              const secondHalfDuration =
                constructionDuration - firstHalfDuration;

              // –ü–µ—Ä–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ —Å—Ç–µ–Ω
              newFundingPlan.push({
                dayIndex: newCurrentDay,
                amount: Math.floor(option.cost / 2),
              });
              newCurrentDay += firstHalfDuration;

              // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏ —Å—Ç–µ–Ω
              const ceilingOption = selectedOptions["–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ"];
              if (ceilingOption) {
                newFundingPlan.push({
                  dayIndex: newCurrentDay,
                  amount: ceilingOption.cost,
                });
                newCurrentDay += getModifiedDuration("–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ");
              }

              // –í—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ —Å—Ç–µ–Ω
              newFundingPlan.push({
                dayIndex: newCurrentDay,
                amount: option.cost - Math.floor(option.cost / 2),
              });
              newCurrentDay += secondHalfDuration;
            } else if (type !== "–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ") {
              // –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π (–∫—Ä–æ–º–µ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤ –ª–æ–≥–∏–∫–µ —Å—Ç–µ–Ω)
              newFundingPlan.push({
                dayIndex: newCurrentDay,
                amount: option.cost,
              });
              newCurrentDay += constructionDuration;
            }
          }
        }

        console.log(
          `üí∞ –ü–ª–∞–Ω —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω –¥–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –ë–ï–ó —É—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤: ${affectedElement} +${additionalDuration} –¥–Ω–µ–π`
        );
        set({ fundingPlan: newFundingPlan });
      },

      preserveIssuedHistory: (newPaymentSchedule: PaymentScheduleItem[]) => {
        const { paymentSchedule: currentPaymentSchedule } = get();

        // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö issued –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ dayIndex
        const issuedHistory = new Map<number, number>();
        currentPaymentSchedule.forEach((payment) => {
          if (payment.issued !== null) {
            issuedHistory.set(payment.dayIndex, payment.issued);
          }
        });

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ issued –∑–Ω–∞—á–µ–Ω–∏—è –∫ –Ω–æ–≤–æ–º—É –≥—Ä–∞—Ñ–∏–∫—É
        const updatedPaymentSchedule = newPaymentSchedule.map((payment) => {
          const savedIssued = issuedHistory.get(payment.dayIndex);
          if (savedIssued !== undefined) {
            return { ...payment, issued: savedIssued };
          }
          return payment;
        });

        console.log(
          `üìã –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è issued –∑–Ω–∞—á–µ–Ω–∏–π: ${issuedHistory.size} –∑–∞–ø–∏—Å–µ–π`
        );
        return updatedPaymentSchedule;
      },

      getModifiedDuration: (constructionType: string) => {
        const { selectedOptions, constructionDurationModifications } = get();
        const option = selectedOptions[constructionType];
        if (!option) return 0;

        const baseDuration = option.duration;
        const modification =
          constructionDurationModifications[constructionType] || 0;
        return baseDuration + modification;
      },

      addDurationModification: (
        constructionType: string,
        additionalDuration: number
      ) => {
        set((state) => ({
          constructionDurationModifications: {
            ...state.constructionDurationModifications,
            [constructionType]:
              (state.constructionDurationModifications[constructionType] || 0) +
              additionalDuration,
          },
        }));
        console.log(
          `‚è±Ô∏è –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ${constructionType}: +${additionalDuration} –¥–Ω–µ–π (–æ–±—â–µ–µ: +${
            (get().constructionDurationModifications[constructionType] || 0) +
            additionalDuration
          })`
        );
      },

      insertDayAt: (insertDay: number, newDay: PaymentScheduleItem) => {
        const { paymentSchedule } = get();
        const newPaymentSchedule = [...paymentSchedule];

        // –°–¥–≤–∏–≥–∞–µ–º –í–°–ï –¥–Ω–∏ —Å –∏–Ω–¥–µ–∫—Å–æ–º >= insertDay –Ω–∞ +1
        const shiftedSchedule = newPaymentSchedule.map((payment) => {
          if (payment.dayIndex >= insertDay) {
            return { ...payment, dayIndex: payment.dayIndex + 1 };
          }
          return payment;
        });

        // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –¥–µ–Ω—å
        shiftedSchedule.push(newDay);

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ dayIndex
        shiftedSchedule.sort((a, b) => a.dayIndex - b.dayIndex);

        console.log(
          `üìÖ –í—Å—Ç–∞–≤–ª–µ–Ω –¥–µ–Ω—å ${insertDay} –¥–ª—è ${newDay.construction}, —Å–¥–≤–∏–Ω—É—Ç—ã –í–°–ï –¥–Ω–∏ >= ${insertDay}`
        );
        set({ paymentSchedule: shiftedSchedule });
      },

      addIdleDays: (constructionType: string, idleDays: number) => {
        const { paymentSchedule, selectedOptions } = get();
        const option = selectedOptions[constructionType];
        if (!option) return;

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ —ç—Ç–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        const constructionPayments = paymentSchedule
          .filter((p) => p.construction === constructionType)
          .sort((a, b) => b.dayIndex - a.dayIndex);

        if (constructionPayments.length === 0) return;

        const lastDay = constructionPayments[0].dayIndex;
        const insertDay = lastDay + 1; // –í—Å—Ç–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–Ω—è

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        const lastPayment = constructionPayments[0];

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–µ–Ω—å –¥–ª—è –¥–æ—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        const newDay: PaymentScheduleItem = {
          dayIndex: insertDay,
          amount: lastPayment.amount, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –¥–Ω–µ–≤–Ω—É—é —Å—É–º–º—É
          issued: null, // –ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
          construction: constructionType,
          daysRequired: lastPayment.daysRequired,
          daysPayed: lastPayment.daysPayed, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
          overallPrice: lastPayment.overallPrice,
          overallDuration: lastPayment.overallDuration,
        };

        // –í—Å—Ç–∞–≤–ª—è–µ–º –¥–µ–Ω—å —Å —Å–¥–≤–∏–≥–æ–º –∏–Ω–¥–µ–∫—Å–æ–≤
        get().insertDayAt(insertDay, newDay);

        console.log(
          `‚è∏Ô∏è –î–æ–±–∞–≤–ª–µ–Ω –¥–µ–Ω—å –¥–æ—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è ${constructionType} (–¥–µ–Ω—å ${insertDay})`
        );
      },

      addToHistory: (day: PaymentScheduleItem) => {
        set((state) => {
          // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º –∂–µ dayIndex –µ—Å–ª–∏ –µ—Å—Ç—å
          const filteredHistory = state.history.filter(
            (h) => h.dayIndex !== day.dayIndex
          );
          return {
            history: [...filteredHistory, day],
          };
        });
        console.log(`üìù –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏—é: –¥–µ–Ω—å ${day.dayIndex}`);
      },

      restoreFromHistory: () => {
        const { paymentSchedule, history } = get();

        // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ dayIndex
        const historyMap = new Map<number, PaymentScheduleItem>();
        history.forEach((day) => {
          historyMap.set(day.dayIndex, day);
        });

        // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ paymentSchedule –Ω–∞ –∑–∞–ø–∏—Å–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        const restoredPaymentSchedule = paymentSchedule.map((payment) => {
          const historyDay = historyMap.get(payment.dayIndex);
          return historyDay || payment;
        });

        console.log(`üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏: ${historyMap.size} –∑–∞–ø–∏—Å–µ–π`);
        set({ paymentSchedule: restoredPaymentSchedule });
      },

      updateConstructionCost: (
        constructionType: string,
        additionalCost: number
      ) => {
        const { paymentSchedule } = get();

        console.log(
          `üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ ${constructionType}: +${additionalCost} —Ä—É–±.`
        );

        set((state) => ({
          paymentSchedule: state.paymentSchedule.map((payment) => {
            if (payment.construction === constructionType) {
              const newOverallPrice = payment.overallPrice + additionalCost;
              const newDailyAmount = Math.floor(
                newOverallPrice / payment.overallDuration
              );

              console.log(
                `üìä –î–µ–Ω—å ${payment.dayIndex}: ${payment.amount} ‚Üí ${newDailyAmount} —Ä—É–±.`
              );

              return {
                ...payment,
                amount: newDailyAmount,
                overallPrice: newOverallPrice,
              };
            }
            return payment;
          }),
        }));
      },

      shouldContinueProcessing: (day: number) => {
        const { paymentSchedule, periods, currentPeriodIndex } = get();

        // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –≤ paymentSchedule
        const maxDayInSchedule = Math.max(
          ...paymentSchedule.map((p) => p.dayIndex)
        );

        // –ï—Å–ª–∏ –¥–µ–Ω—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –¥–Ω—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞
        if (day > maxDayInSchedule) {
          return false;
        }

        // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥ –∏ –¥–µ–Ω—å –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω –∫–æ–Ω—Ü—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        const isLastPeriod = currentPeriodIndex >= periods.length - 1;
        if (isLastPeriod && periods.length > 0) {
          const lastPeriod = periods[periods.length - 1];
          if (lastPeriod && day >= lastPeriod.endDay) {
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ –∫–æ–Ω—Ü–∞ paymentSchedule
            return day <= maxDayInSchedule;
          }
        }

        // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
        const dayPayments = paymentSchedule.filter((p) => p.dayIndex === day);
        return dayPayments.length > 0;
      },
    }),
    {
      name: "fact-storage",
      storage: {
        getItem: (name) => {
          const str = sessionStorage.getItem(name);
          return str ? JSON.parse(str) : null;
        },
        setItem: (name, value) => {
          sessionStorage.setItem(name, JSON.stringify(value));
        },
        removeItem: (name) => {
          sessionStorage.removeItem(name);
        },
      },
    }
  )
);
