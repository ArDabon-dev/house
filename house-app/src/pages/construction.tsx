import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import "./construction.css";
import { useFactStore } from "../store/factStore";
import { usePlanStore } from "../store/store";
import { useOnboardingStore } from "../store/onboardingStore";
import { CONSTRUCTION_OPTIONS } from "../constants";
import LayeredCanvas from "../components/LayeredCanvas";
import Indicators from "../components/Indicators";
import ConstructionCard from "../components/ConstructionCard";
import CostChart from "../components/CostChart";
import {
  ArrowLeftIcon,
  ArrowRightIcon,
  RiskIcon,
  MoneyIcon,
  TimeIcon,
} from "../components/Icons";
import { useTour } from "../components/TourProvider";
import { useTourStorage } from "../hooks/useTourStorage";
import { CONSTRUCTION_TOUR } from "../config/tours";
import type { ConstructionOption } from "../constants";
import type { CreateResultRequest } from "../types/api";

// –ë–∞–∑–æ–≤—ã–π URL API
const API_URL =
  window.location.hostname === "localhost" ||
  window.location.hostname === "127.0.0.1"
    ? "http://localhost:8080/api"
    : "https://scheduler-assistant.ru/api";

const getDayDeclension = (count: number): string => {
  if (count % 10 === 1 && count % 100 !== 11) {
    return "–¥–µ–Ω—å";
  } else if (
    [2, 3, 4].includes(count % 10) &&
    ![12, 13, 14].includes(count % 100)
  ) {
    return "–¥–Ω—è";
  } else {
    return "–¥–Ω–µ–π";
  }
};

interface LayerConfig {
  id: string;
  assetPath: string;
  zIndex: number;
  opacity: number;
  visible: boolean;
  blendMode?: GlobalCompositeOperation;
  offsetX?: number;
  offsetY?: number;
  scaleX?: number;
  scaleY?: number;
}

interface LayeredImageConfig {
  width: number;
  height: number;
  layers: LayerConfig[];
}

interface CardData {
  id: number;
  title: string;
  options: ConstructionOption[];
}

const layeredImageConfig: LayeredImageConfig = {
  width: 288,
  height: 196,
  layers: [
    {
      id: "house",
      assetPath: "/house.png",
      zIndex: 1,
      opacity: 1,
      visible: true,
    },
    {
      id: "roof-red",
      assetPath: "/redRoof.png",
      zIndex: 2,
      opacity: 1,
      visible: false,
    },
    {
      id: "roof-blue",
      assetPath: "/blueRoof.png",
      zIndex: 2,
      opacity: 1,
      visible: false,
    },
    {
      id: "roof-green",
      assetPath: "/greenRoof.png",
      zIndex: 2,
      opacity: 1,
      visible: false,
    },
    {
      id: "roof-pink",
      assetPath: "/pinkRoof.png",
      zIndex: 2,
      opacity: 1,
      visible: false,
    },
  ],
};

const getCardsFromConstants = (): CardData[] => {
  const constructionTypes = [
    ...new Set(CONSTRUCTION_OPTIONS.map((option) => option.constructionType)),
  ];

  return constructionTypes.map((type, index) => ({
    id: index + 1,
    title: type,
    options: CONSTRUCTION_OPTIONS.filter(
      (option) => option.constructionType === type
    ),
  }));
};

const mockCards = getCardsFromConstants();

export default function ConstructionPage() {
  const [roofType, setRoofType] = useState<string>("");
  const [currentCardIndex, setCurrentCardIndex] = useState(0);
  const [requestAmount, setRequestAmount] = useState<string>("10000");
  const [showExceededPopup, setShowExceededPopup] = useState(false);
  const [showLimitsPopup, setShowLimitsPopup] = useState(false);
  const [selectedRiskSolution, setSelectedRiskSolution] = useState<
    "solution" | "alternative" | null
  >(null);
  const navigate = useNavigate();

  const {
    selectedOptions,
    selectOption,
    getRemainingBudget,
    getRemainingDuration,
    getTotalCost,
    getTotalDuration,
    getRiskCosts,
    getRiskDuration,
    periods,
    currentPeriodIndex,
    selectRiskSolution,
    initializeFromPlan,
    piggyBank,
    requestMoney,
    moveToNextPeriod,
    processDay,
    fundingPlan,
    paymentSchedule,
    planningRemainder,
    duration,
    budget,
  } = useFactStore();

  const planStore = usePlanStore();
  const { projectName } = useOnboardingStore();
  const { startTour } = useTour();
  const { isTourCompleted } = useTourStorage();

  const currentPeriod = periods[currentPeriodIndex];
  const currentRisk = currentPeriod?.risk;
  const currentCard = mockCards[currentCardIndex];
  const currentSelection = selectedOptions[currentCard?.title] || undefined;

  // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π —Ç—Ä–∞–Ω—à
  const nextFunding = fundingPlan.find((funding) => {
    if (currentPeriodIndex < periods.length) {
      return funding.dayIndex > periods[currentPeriodIndex].startDay;
    } else {
      return funding.dayIndex > periods[currentPeriodIndex - 1].startDay;
    }
  });
  const nextFundingText = nextFunding
    ? `–§–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ ${nextFunding.dayIndex} –¥–Ω–µ–π + ${nextFunding.amount}`
    : "–§–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ";

  // –†–∞—Å—á–µ—Ç—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –≤—ã–±–æ—Ä–∞
  const plannedOption = planStore.selectedOptions[currentCard?.title || ""];
  const plannedDuration = plannedOption?.duration || 0;
  const forecastDuration = paymentSchedule.filter(
    (payment) => payment.construction === currentCard?.title
  ).length;

  // –†–∞—Å—á–µ—Ç –æ—Å—Ç–∞—Ç–∫–∞ –∞–≤–∞–Ω—Å–∞ –¥–ª—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –º–µ–Ω—é—à–∫–µ –≤—ã–±–æ—Ä–∞
  const getAdvanceRemainder = () => {
    if (!currentCard) return 0;

    console.log("üîç currentCard", currentCard);

    // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–∑ –º–µ–Ω—é—à–∫–∏
    const constructionPayments = paymentSchedule.filter(
      (payment) => payment.construction === currentCard.title
    );
    console.log("üîç constructionPayments", constructionPayments);

    if (constructionPayments.length === 0) return 0;

    const firstConstructionDay = Math.min(
      ...constructionPayments.map((p) => p.dayIndex)
    );
    console.log("üîç firstConstructionDay", firstConstructionDay);

    // –°—É–º–º–∏—Ä—É–µ–º –≤—Å–µ —Ç—Ä–∞–Ω—à–∏ –¥–æ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–∑ –º–µ–Ω—é—à–∫–∏
    const fundingBeforeConstruction = fundingPlan
      .filter((funding) => funding.dayIndex < firstConstructionDay)
      .reduce((total, funding) => total + funding.amount, 0);
    console.log("üîç fundingBeforeConstruction", fundingBeforeConstruction);

    // –°—É–º–º–∏—Ä—É–µ–º –≤—Å–µ amount –¥–æ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–∑ –º–µ–Ω—é—à–∫–∏
    const paymentsBeforeConstruction = paymentSchedule
      .filter((payment) => payment.dayIndex < firstConstructionDay)
      .reduce((total, payment) => total + (payment.amount || 0), 0);
    console.log("üîç paymentsBeforeConstruction", paymentsBeforeConstruction);

    // –ù–∞—Ö–æ–¥–∏–º —Ç—Ä–∞–Ω—à –≤ –¥–µ–Ω—å –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    const fundingOnConstructionDay = fundingPlan
      .filter((funding) => funding.dayIndex === firstConstructionDay)
      .reduce((total, funding) => total + funding.amount, 0);
    console.log("üîç fundingOnConstructionDay", fundingOnConstructionDay);

    return (
      fundingBeforeConstruction -
      paymentsBeforeConstruction +
      fundingOnConstructionDay
    );
  };

  const advanceRemainder = getAdvanceRemainder();

  // –†–∞—Å—á–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
  const getConstructionData = () => {
    if (!currentCard) return { planned: 0, actual: 0 };

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –≤—ã—á–∏—Å–ª–µ–Ω–Ω—É—é plannedOption
    const plannedCost = plannedOption?.cost || 0;

    // –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑ paymentSchedule
    const actualCost = paymentSchedule
      .filter((payment) => payment.construction === currentCard.title)
      .reduce((total, payment) => {
        return (
          total +
          (payment.issued !== null && payment.issued !== 0
            ? payment.issued
            : payment.amount || 0)
        );
      }, 0);

    return { planned: plannedCost, actual: actualCost };
  };

  const constructionData = getConstructionData();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤
  const hasExceededPlan = constructionData.actual > constructionData.planned;
  const hasExceededLimits =
    forecastDuration > plannedDuration ||
    paymentSchedule.reduce(
      (total, payment) => total + (payment.amount || 0),
      0
    ) > planStore.getTotalCost();

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø–∞–ø—ã –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏
  useEffect(() => {
    if (hasExceededPlan) {
      setShowExceededPopup(true);
      setTimeout(() => setShowExceededPopup(false), 3000);
    }
  }, [hasExceededPlan]);

  useEffect(() => {
    if (hasExceededLimits) {
      setShowLimitsPopup(true);
      setTimeout(() => setShowLimitsPopup(false), 3000);
    }
  }, [hasExceededLimits]);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω—ã –ª–∏ –≤—Å–µ –ø–µ—Ä–∏–æ–¥—ã
  const isAllPeriodsCompleted = currentPeriodIndex >= periods.length;

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
  const isConstructionLocked = (constructionType: string): boolean => {
    return paymentSchedule.some(
      (payment) =>
        payment.construction === constructionType && payment.issued !== null
    );
  };

  useEffect(() => {
    initializeFromPlan();
  }, [initializeFromPlan]);

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–µ—Ä–∏–æ–¥–∞
  useEffect(() => {
    setSelectedRiskSolution(null);
  }, [currentPeriodIndex]);

  // –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ –±—ç–∫–µ–Ω–¥
  const sendResultsToBackend = async () => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–æ—Ä–∞ –ø–ª–∞–Ω–∞
      const plannedDuration = planStore.getTotalDuration();
      const plannedCost = planStore.getTotalCost();

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ paymentSchedule
      const actualCost = paymentSchedule.reduce((total, payment) => {
        return total + (payment.issued || 0);
      }, 0);

      // –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, –∫–æ–≥–¥–∞ –±—ã–ª–∏ –≤—ã–¥–∞–Ω—ã –¥–µ–Ω—å–≥–∏
      const actualDuration = paymentSchedule.filter(
        (payment) => payment.issued !== null && payment.issued > 0
      ).length;

      const resultData: CreateResultRequest = {
        name: projectName || "–ò–≥—Ä–æ–∫",
        planned_duration: plannedDuration,
        planned_cost: plannedCost,
        actual_duration: actualDuration,
        actual_cost: actualCost,
      };

      console.log("üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:", resultData);

      const response = await fetch(`${API_URL}/results`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(resultData),
      });

      if (!response.ok) {
        throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤");
      }

      console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –±—ç–∫–µ–Ω–¥");
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:", error);
    }
  };

  // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
  useEffect(() => {
    if (isAllPeriodsCompleted) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ –±—ç–∫–µ–Ω–¥
      sendResultsToBackend();

      const timer = setTimeout(() => {
        navigate("/comparison");
      }, 2000); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è

      return () => clearTimeout(timer);
    }
  }, [isAllPeriodsCompleted, navigate]);

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—É—Ä –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ—Å–µ—â–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    const timer = setTimeout(() => {
      startTour(CONSTRUCTION_TOUR);
    }, 500);

    return () => clearTimeout(timer);
  }, [isTourCompleted, startTour]);

  useEffect(() => {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø –∫—Ä—ã—à–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π
    const roofOption = selectedOptions["–ö—Ä—ã—à–∞"];
    if (roofOption) {
      const roofTypeMap: Record<string, string> = {
        "4 –ì–∏–±–∫–∞—è/–±–∏—Ç—É–º–Ω–∞—è —á–µ—Ä–µ–ø–∏—Ü–∞": "red",
        "4 –ö–µ—Ä–∞–º–∏—á–µ—Å–∫–∞—è —á–µ—Ä–µ–ø–∏—Ü–∞": "blue",
        "4 –ú–µ—Ç–∞–ª–ª–æ—á–µ—Ä–µ–ø–∏—Ü–∞": "green",
      };
      setRoofType(roofTypeMap[roofOption.type] || "pink");
    }
  }, [selectedOptions]);

  const handleCardSwipeLeft = () => {
    if (currentCardIndex < mockCards.length - 1) {
      setCurrentCardIndex(currentCardIndex + 1);
    }
  };

  const handleCardSwipeRight = () => {
    if (currentCardIndex > 0) {
      setCurrentCardIndex(currentCardIndex - 1);
    }
  };

  const handleOptionSelect = (option: ConstructionOption) => {
    selectOption(option.constructionType, option);

    // –ï—Å–ª–∏ —ç—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∞ –∫—Ä—ã—à–∏, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø –∫—Ä—ã—à–∏
    if (currentCard?.title === "–ö—Ä—ã—à–∞") {
      const roofTypeMap: Record<string, string> = {
        "4 –ì–∏–±–∫–∞—è/–±–∏—Ç—É–º–Ω–∞—è —á–µ—Ä–µ–ø–∏—Ü–∞": "red",
        "4 –ö–µ—Ä–∞–º–∏—á–µ—Å–∫–∞—è —á–µ—Ä–µ–ø–∏—Ü–∞": "blue",
        "4 –ú–µ—Ç–∞–ª–ª–æ—á–µ—Ä–µ–ø–∏—Ü–∞": "green",
      };
      setRoofType(roofTypeMap[option.type] || "pink");
    }
  };

  const handleRiskSolutionSelect = (solution: "solution" | "alternative") => {
    setSelectedRiskSolution(solution);
  };

  const handleConfirmRiskSolution = () => {
    if (currentPeriod && selectedRiskSolution) {
      console.log(`üè¶ –ö–£–ë–´–®–ö–ê –ü–ï–†–ï–î –í–´–ë–û–†–û–ú –†–ï–®–ï–ù–ò–Ø: ${piggyBank} —Ä—É–±.`);

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
      selectRiskSolution(currentPeriod.id, selectedRiskSolution);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–Ω–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
      const currentPeriodDays =
        currentPeriod.endDay - currentPeriod.startDay + 1;
      console.log(
        `üèóÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ ${currentPeriodDays} –¥–Ω–µ–π –ø–µ—Ä–∏–æ–¥–∞ ${
          currentPeriodIndex + 1
        }`
      );

      for (
        let day = currentPeriod.startDay;
        day <= currentPeriod.endDay;
        day++
      ) {
        processDay(day);
      }

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setSelectedRiskSolution(null);

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–µ—Ä–∏–æ–¥—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ä–µ—à–µ–Ω–∏—è
      setTimeout(() => {
        moveToNextPeriod();
      }, 1000);
    }
  };

  const updateLayeredConfig = () => {
    const updatedConfig = { ...layeredImageConfig };

    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫—Ä—ã—à–∏
    updatedConfig.layers.forEach((layer) => {
      if (layer.id.startsWith("roof-")) {
        layer.visible = false;
      }
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫—Ä—ã—à—É
    if (roofType) {
      const roofLayer = updatedConfig.layers.find(
        (layer) => layer.id === `roof-${roofType}`
      );
      if (roofLayer) {
        roofLayer.visible = true;
      }
    }

    return updatedConfig;
  };

  return (
    <div className="construction-page">
      <div className="construction-scroll-container">
        <div className="header">
          <h1 className="title">–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ</h1>
        </div>

        <div className="construction-container">
          {isAllPeriodsCompleted ? (
            <div className="completion-card">
              <div className="completion-content">
                <div className="completion-icon">üè†</div>
                <div className="completion-title">–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</div>
                <div className="completion-text">
                  –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏–ª–∏ —Å–≤–æ–π –¥–æ–º. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫
                  —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º...
                </div>
              </div>
            </div>
          ) : currentRisk ? (
            currentPeriod?.isProtected ? (
              <div className="protection-card">
                <div className="protection-header">
                  <div className="protection-indicator">
                    <span>üõ°Ô∏è</span>
                    <span>–ó–∞—â–∏—Ç–∞ –æ—Ç —Ä–∏—Å–∫–∞</span>
                  </div>
                </div>

                <div className="protection-description">
                  –†–∏—Å–∫ {currentRisk.id}: {currentRisk.description}
                </div>

                <div className="protection-info">
                  <div className="protection-text">
                    –≠—Ç–æ—Ç —Ä–∏—Å–∫ –¥–µ–π—Å—Ç–≤—É–µ—Ç –Ω–∞ –¥—Ä—É–≥—É—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, –ø–æ—ç—Ç–æ–º—É –≤—ã
                    –∑–∞—â–∏—â–µ–Ω—ã –æ—Ç –µ–≥–æ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π.
                  </div>

                  <button
                    className="btn-primary protection-button"
                    onClick={() => {
                      console.log(
                        `üè¶ –ö–£–ë–´–®–ö–ê –ü–ï–†–ï–î –ó–ê–©–ò–¢–û–ô: ${piggyBank} —Ä—É–±.`
                      );
                      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–Ω–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
                      const currentPeriodDays =
                        currentPeriod.endDay - currentPeriod.startDay + 1;
                      console.log(
                        `üõ°Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ ${currentPeriodDays} –¥–Ω–µ–π –ø–µ—Ä–∏–æ–¥–∞ ${
                          currentPeriodIndex + 1
                        } (–∑–∞—â–∏—Ç–∞)`
                      );

                      for (
                        let day = currentPeriod.startDay;
                        day <= currentPeriod.endDay;
                        day++
                      ) {
                        processDay(day);
                      }

                      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–µ—Ä–∏–æ–¥—É
                      setTimeout(() => {
                        moveToNextPeriod();
                      }, 1000);
                    }}
                  >
                    –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–µ—Ä–∏–æ–¥—É
                  </button>
                </div>
              </div>
            ) : (
              <div className="risk-card">
                <div className="risk-header">
                  <div className="risk-indicator">
                    <RiskIcon />
                    <span>–†–∏—Å–∫ {currentRisk.id}</span>
                  </div>
                </div>

                <div className="risk-description">
                  {currentRisk.description}
                </div>

                <div className="risk-solutions">
                  <div
                    className={`solution-option ${
                      selectedRiskSolution === "solution" ? "active" : ""
                    }`}
                    onClick={() => handleRiskSolutionSelect("solution")}
                  >
                    <div className="solution-text">{currentRisk.solution}</div>
                    <div className="solution-indicators">
                      <div className="cost-indicator">
                        <MoneyIcon />
                        <span>{currentRisk.cost}</span>
                      </div>
                      <div className="time-indicator">
                        <TimeIcon />
                        <span>0</span>
                      </div>
                    </div>
                  </div>

                  <div
                    className={`solution-option ${
                      selectedRiskSolution === "alternative" ? "active" : ""
                    }`}
                    onClick={() => handleRiskSolutionSelect("alternative")}
                  >
                    <div className="solution-text">
                      {currentRisk.alternativeDescription}
                    </div>
                    <div className="solution-indicators">
                      <div className="cost-indicator">
                        <MoneyIcon />
                        <span>0</span>
                      </div>
                      <div className="time-indicator">
                        <TimeIcon />
                        <span>
                          +{currentRisk.duration}{" "}
                          {getDayDeclension(currentRisk.duration)}
                        </span>
                      </div>
                    </div>
                  </div>
                </div>

                {selectedRiskSolution && (
                  <div className="risk-confirm-section">
                    <div className="risk-confirm-text">
                      –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–±–æ—Ä —Ä–∏—Å–∫–∞
                    </div>
                    <button
                      className="btn-primary risk-confirm-button"
                      onClick={handleConfirmRiskSolution}
                    >
                      –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
                    </button>
                  </div>
                )}
              </div>
            )
          ) : (
            <div className="no-risk-card">
              <div className="no-risk-content">
                <div className="no-risk-icon">‚úÖ</div>
                <div className="no-risk-text">–í —ç—Ç–æ–º –ø–µ—Ä–∏–æ–¥–µ —Ä–∏—Å–∫–æ–≤ –Ω–µ—Ç</div>
              </div>
            </div>
          )}

          <div className="house-display">
            <div className="house-container">
              <div className="house-header">
                <h2 className="house-title">–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ</h2>
                <div className="period-badge">
                  {isAllPeriodsCompleted
                    ? "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
                    : `–ü–µ—Ä–∏–æ–¥ ${currentPeriodIndex + 1}`}
                </div>
              </div>
              <LayeredCanvas config={updateLayeredConfig()} />
            </div>
          </div>

          <div className="plan-forecast-cards">
            <div className="plan-card">
              <div className="card-title">–ü–ª–∞–Ω</div>
              <div className="card-content">
                <div className="card-item">
                  <MoneyIcon />
                  <span>{planStore.getTotalCost()}</span>
                </div>
                <div className="card-item">
                  <TimeIcon />
                  <span>{planStore.getTotalDuration()} –¥–Ω–µ–π</span>
                </div>
              </div>
            </div>
            <div className="forecast-card">
              <div className="card-title">–ü—Ä–æ–≥–Ω–æ–∑</div>
              <div className="card-content">
                <div className="card-item">
                  <MoneyIcon />
                  <span>
                    {paymentSchedule.reduce(
                      (total, payment) => total + (payment.amount || 0),
                      0
                    )}
                  </span>
                </div>
                <div className="card-item">
                  <TimeIcon />
                  <span>{paymentSchedule.length} –¥–Ω–µ–π</span>
                </div>
              </div>
            </div>
          </div>

          <div className="balance-simple-badges">
            <div className="balance-badge">
              <div className="badge-title">–ë–∞–ª–∞–Ω—Å</div>
              <div className="badge-content">
                <MoneyIcon />
                <span>{piggyBank}</span>
              </div>
            </div>
            <div className="simple-badge">
              <div className="badge-title">–ü—Ä–æ—Å—Ç–æ–π</div>
              <div className="badge-content">
                <TimeIcon />
                <span>
                  {
                    paymentSchedule.filter((payment) => payment.issued === 0)
                      .length
                  }{" "}
                  –¥–Ω–µ–π
                </span>
              </div>
            </div>
          </div>

          <div className="next-funding-text">{nextFundingText}</div>

          <div className="request-money-card">
            <input
              type="number"
              className="request-amount-input"
              value={requestAmount}
              onChange={(e) => setRequestAmount(e.target.value)}
              placeholder="–°—É–º–º–∞"
              min="1"
            />
            <button
              className="btn-request"
              onClick={() => {
                const amount = parseInt(requestAmount) || 0;
                if (amount > 0) {
                  console.log(`üè¶ –ö–£–ë–´–®–ö–ê –ü–ï–†–ï–î –ó–ê–ü–†–û–°–û–ú: ${piggyBank} —Ä—É–±.`);
                  requestMoney(amount);
                }
              }}
            >
              –ó–∞–ø—Ä–æ—Å–∏—Ç—å –µ—â–µ
            </button>
          </div>

          <div className="construction-options">
            <div className="options-header">
              <div
                className="nav-arrow"
                onClick={
                  currentCardIndex === 0 ? undefined : handleCardSwipeRight
                }
                style={{
                  cursor: currentCardIndex === 0 ? "not-allowed" : "pointer",
                  opacity: currentCardIndex === 0 ? 0.5 : 1,
                  outline: 0,
                }}
              >
                <ArrowLeftIcon />
              </div>
              <h2 className="options-title">{currentCard?.title}</h2>
              <div className="period-counter">
                {currentCardIndex + 1}/{mockCards.length}
              </div>
              <div
                className="nav-arrow"
                onClick={
                  currentCardIndex === mockCards.length - 1
                    ? undefined
                    : handleCardSwipeLeft
                }
                style={{
                  cursor:
                    currentCardIndex === mockCards.length - 1
                      ? "not-allowed"
                      : "pointer",
                  opacity: currentCardIndex === mockCards.length - 1 ? 0.5 : 1,
                  outline: 0,
                }}
              >
                <ArrowRightIcon />
              </div>
            </div>

            <div className="plan-forecast-badges">
              <div className="plan-forecast-badge">
                <div className="badge-title">–ü–ª–∞–Ω / –ü—Ä–æ–≥–Ω–æ–∑</div>
                <div className="badge-content">
                  <TimeIcon />
                  <span>
                    {plannedDuration} / {forecastDuration} –¥–Ω–µ–π
                  </span>
                </div>
              </div>
              <div className="forecast-remainder-badge">
                <div className="badge-title">–û—Å—Ç–∞—Ç–æ–∫ –∞–≤–∞–Ω—Å–∞</div>
                <div className="badge-content">
                  <MoneyIcon />
                  <span>{advanceRemainder}</span>
                </div>
              </div>
            </div>

            <CostChart
              planned={constructionData.planned}
              actual={constructionData.actual}
              title="–ü–ª–∞–Ω/ –ü—Ä–æ–≥–Ω–æ–∑ —Å—Ç–æ–∏–º–æ—Å—Ç–∏"
            />

            {currentCard && (
              <ConstructionCard
                title={currentCard.title}
                options={currentCard.options}
                currentSelection={currentSelection}
                onOptionSelect={handleOptionSelect}
                isLocked={isConstructionLocked(currentCard.title)}
              />
            )}

            <div className="buttons">
              <button className="btn-secondary">–ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º</button>
              <button
                className="btn-primary"
                onClick={() => {
                  console.log(
                    `üè¶ –ö–£–ë–´–®–ö–ê –ü–ï–†–ï–î –°–¢–†–û–ò–¢–ï–õ–¨–°–¢–í–û–ú: ${piggyBank} —Ä—É–±.`
                  );
                }}
              >
                –°—Ç—Ä–æ–∏—Ç—å
              </button>
            </div>
          </div>
        </div>

        {/* –ü–æ–ø–∞–ø—ã */}
        {showExceededPopup && (
          <div className="exceeded-popup">
            <div className="popup-content">
              <RiskIcon />
              <span>–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ø–ª–∞–Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å</span>
            </div>
          </div>
        )}

        {showLimitsPopup && (
          <div className="limits-popup">
            <div className="popup-content">
              <RiskIcon />
              <span>–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç—ã</span>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
